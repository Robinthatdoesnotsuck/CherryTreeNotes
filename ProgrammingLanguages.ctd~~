<?xml version="1.0" encoding="UTF-8"?>
<cherrytree>
  <bookmarks list=""/>
  <node name="Python" unique_id="1" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1603816217" ts_lastsave="1613442047">
    <rich_text>
</rich_text>
    <rich_text link="node 7" scale="h1">Datascience</rich_text>
    <node name="Datascience" unique_id="7" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1603816262" ts_lastsave="1613060594">
      <rich_text scale="h1">Some notes from datascience from data camp courses and books</rich_text>
      <rich_text>
	</rich_text>
      <rich_text link="node 13" scale="h1">Supervised learning and machine learning</rich_text>
      <rich_text>
</rich_text>
      <rich_text scale="h1">	</rich_text>
      <rich_text link="node 14" scale="h1">Mergin Tables and shieeet</rich_text>
      <rich_text>
</rich_text>
      <rich_text scale="h1">	</rich_text>
      <rich_text link="node 20" scale="h1">Data types for Data Science</rich_text>
      <rich_text>
</rich_text>
      <rich_text scale="h1">	</rich_text>
      <rich_text link="node 39" scale="h1">Unsupervised Learning</rich_text>
      <rich_text>
	</rich_text>
      <rich_text link="node 60" scale="h1">Linear Classifiers in Python</rich_text>
      <rich_text>
</rich_text>
      <node name="Machine learning KNN" unique_id="13" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1604932323" ts_lastsave="1611685407">
        <rich_text scale="h1">Course contents</rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h2">   ▪ </rich_text>
        <rich_text link="node 22" scale="h2">Classification</rich_text>
        <rich_text scale="h2">
   ◇ </rich_text>
        <rich_text link="node 23" scale="h2">Regression</rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h2">   ◇ </rich_text>
        <rich_text link="node 28" scale="h2">Fine-tuning your model</rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h2">  </rich_text>
        <rich_text link="node 35" scale="h2"> ◇ Preprocessing and pipelines</rich_text>
        <rich_text>
</rich_text>
        <node name="Classification" unique_id="22" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1610927049" ts_lastsave="1610927069">
          <rich_text scale="h1">Train/Test Split + Fit/Predict/Accuracy</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>

</rich_text>
          <rich_text scale="h1">Overfitting and underfitting</rich_text>
          <rich_text>
</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>
</rich_text>
          <codebox char_offset="39" justification="left" frame_width="100" frame_height="100" width_in_pixels="0" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="1"># Import necessary modules
from sklearn.neighbors import KNeighborsClassifier 
from sklearn.model_selection import train_test_split

# Create feature and target arrays
X = digits.data
y = digits.target

# Split into training and test set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=42, stratify=y)

# Create a k-NN classifier with 7 neighbors: knn
knn = KNeighborsClassifier(n_neighbors = 7)

# Fit the classifier to the training data
knn.fit(X_train, y_train)

# Print the accuracy
print(knn.score(X_test, y_test))
</codebox>
          <codebox char_offset="71" justification="left" frame_width="100" frame_height="100" width_in_pixels="0" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="1"># Setup arrays to store train and test accuracies
neighbors = np.arange(1, 9)
train_accuracy = np.empty(len(neighbors))
test_accuracy = np.empty(len(neighbors))

# Loop over different values of k
for i, k in enumerate(neighbors):
    # Setup a k-NN Classifier with k neighbors: knn
    knn = KNeighborsClassifier(n_neighbors = k)

    # Fit the classifier to the training data
    knn.fit(X_train, y_train)
    
    #Compute accuracy on the training set
    train_accuracy[i] = knn.score(X_train, y_train)

    #Compute accuracy on the testing set
    test_accuracy[i] = knn.score(X_test, y_test)

# Generate plot
plt.title('k-NN: Varying Number of Neighbors')
plt.plot(neighbors, test_accuracy, label = 'Testing Accuracy')
plt.plot(neighbors, train_accuracy, label = 'Training Accuracy')
plt.legend()
plt.xlabel('Number of Neighbors')
plt.ylabel('Accuracy')
plt.show()</codebox>
        </node>
        <node name="Regression" unique_id="23" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1610927057" ts_lastsave="1611188460">
          <rich_text scale="h1">In regression the target value is a continous changing variable like prices, gdp or anything like that</rich_text>
          <rich_text>
</rich_text>
          <rich_text scale="h2">	You create a feature and target values</rich_text>
          <rich_text>
</rich_text>
          <rich_text scale="h3">		So you separate the data set in two subsets one that has the features and another one that just has the target variable that we want to predict</rich_text>
          <rich_text>

</rich_text>
          <rich_text scale="h1">Chapters</rich_text>
          <rich_text>
</rich_text>
          <rich_text scale="h2">   ◇ </rich_text>
          <rich_text link="node 24" scale="h2">Basics of linear regression</rich_text>
          <rich_text scale="h2">
   ◇ </rich_text>
          <rich_text link="node 25" scale="h2">Importing data for supervised learning</rich_text>
          <rich_text>
</rich_text>
          <rich_text scale="h2">   ◇ </rich_text>
          <rich_text link="node 26" scale="h2">Cross-Validation</rich_text>
          <rich_text>
</rich_text>
          <rich_text scale="h2">   </rich_text>
          <rich_text link="node 27" scale="h2">◇ Regularized Regression</rich_text>
          <rich_text>


</rich_text>
          <node name="Basics of linear regression" unique_id="24" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1611035532" ts_lastsave="1611175905">
            <rich_text scale="h1">Basics of Linear regression</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">	In linear regression you fit a line into the date in the form of y = ax +b</rich_text>
            <rich_text>
• </rich_text>
            <rich_text scale="h3">		Y = target variable</rich_text>
            <rich_text>
• </rich_text>
            <rich_text scale="h3">		x = is a single feature</rich_text>
            <rich_text>
• </rich_text>
            <rich_text scale="h3">		a,b = parameters of the model</rich_text>
            <rich_text>
• </rich_text>
            <rich_text scale="h3">		It chooses a coeffcient for each feature variable
• 		Large coefficients lead to overfitting</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">	So fitting is basicaly manipulating a and b or choosing a and b</rich_text>
            <rich_text>
• </rich_text>
            <rich_text scale="h3">		You define an error function and you choose the one that minimizes the error</rich_text>
            <rich_text>
• </rich_text>
            <rich_text scale="h3">			So you create a loss function that minimizes the fit and the date </rich_text>
            <rich_text>
• </rich_text>
            <rich_text scale="h3">			For each data point you calculate the distance between the points and the fit line so to not cancel out a negative or positive residual we square its values to see what is actually the absolute distance of the data  points</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h3">            → You use the OLS method to minimize the mean square error</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h3">            → The fit function on scikit learn uses OLS to do this</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h3">            → So a linear regression is defined by ai features been fit into the model so we can have different points and the accuracy of this regression is measured with r2
               ⇒  So this means that a linear regression is a model of aN number of dimensions depending on its features</rich_text>
            <rich_text>
               
                  • </rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">Excercises</rich_text>
            <rich_text>
	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/supervised-learning-with-scikit-learn/regression-2?ex=6" scale="h2">Fit &amp; predict for regression</rich_text>
            <rich_text>
		</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>
	
</rich_text>
            <rich_text scale="h2">	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/supervised-learning-with-scikit-learn/regression-2?ex=7" scale="h2">Train/test split for regression</rich_text>
            <rich_text>
		</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>
</rich_text>
            <encoded_png char_offset="1203" justification="left" link="">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</encoded_png>
            <codebox char_offset="1249" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import LinearRegression
from sklearn.linear_model import LinearRegression
# Create the regressor: reg
reg = LinearRegression()

# Create the prediction space
prediction_space = np.linspace(min(X_fertility), max(X_fertility)).reshape(-1,1)

# Fit the model to the data
reg.fit(X_fertility, y)

# Compute predictions over the prediction space: y_pred
y_pred = reg.predict(prediction_space)

# Print R^2 
print(reg.score(X_fertility, y))

# Plot regression line
plt.plot(prediction_space, y_pred, color='black', linewidth=3)
plt.show()
</codebox>
            <codebox char_offset="1288" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import necessary modules
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split

# Create training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state= 42)

# Create the regressor: reg_all
reg_all = LinearRegression()

# Fit the regressor to the training data
reg_all.fit(X_train, y_train)

# Predict on the test data: y_pred
y_pred = reg_all.predict(X_test)

# Compute and print R^2 and RMSE
print("R^2: {}".format(reg_all.score(X_test, y_test)))
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
print("Root Mean Squared Error: {}".format(rmse))
</codebox>
          </node>
          <node name="Importing data for supervised learning" unique_id="25" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1611035555" ts_lastsave="1611035561">
            <rich_text scale="h1">Importing data for supervised learning</rich_text>
            <rich_text>
	</rich_text>
            <rich_text scale="h3">In this chapter, you will work with </rich_text>
            <rich_text link="webs https://www.gapminder.org/data/" scale="h3">Gapminder</rich_text>
            <rich_text scale="h3"> data that we have consolidated into one CSV file available in the workspace as </rich_text>
            <rich_text family="monospace" scale="h3">'gapminder.csv'</rich_text>
            <rich_text scale="h3">.  Specifically, your goal will be to use this data to predict the life  expectancy in a given country based on features such as the country's  GDP, fertility rate, and population. As in Chapter 1, the dataset has  been preprocessed.
	Since the target variable here is quantitative, this is a regression  problem. To begin, you will fit a linear regression with just one  feature: </rich_text>
            <rich_text family="monospace" scale="h3">'fertility'</rich_text>
            <rich_text scale="h3">, which is the average number of  children a woman in a given country gives birth to. In later exercises,  you will use all the features to build regression models.
	Before that, however, you need to import the data and get it into the  form needed by scikit-learn. This involves creating feature and target  variable arrays. Furthermore, since you are going to use only one  feature to begin with, you need to do some reshaping using NumPy's </rich_text>
            <rich_text family="monospace" scale="h3">.reshape()</rich_text>
            <rich_text scale="h3">  method. Don't worry too much about this reshaping right now, but it is  something you will have to do occasionally when working with  scikit-learn so it is useful to practice.</rich_text>
            <rich_text>
	
	</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text> </rich_text>
            <codebox char_offset="1206" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import numpy and pandas
import numpy as np
import pandas as pd

# Read the CSV file into a DataFrame: df
df = pd.read_csv('gapminder.csv')

# Create arrays for features and target variable
y = df['life'].values
X = df['fertility'].values

# Print the dimensions of X and y before reshaping
print("Dimensions of y before reshaping: {}".format(y.shape))
print("Dimensions of X before reshaping: {}".format(X.shape))

# Reshape X and y
y = y.reshape(-1, 1)
X = X.reshape(-1, 1)

# Print the dimensions of X and y after reshaping
print("Dimensions of y after reshaping: {}".format(y.shape))
print("Dimensions of X after reshaping: {}".format(X.shape))
</codebox>
          </node>
          <node name="Cross-Validation" unique_id="26" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1611109906" ts_lastsave="1611175119">
            <rich_text scale="h1">We use Cross-Validation cause</rich_text>
            <rich_text>
• </rich_text>
            <rich_text scale="h2">	Model performance is dependent on way the data is split</rich_text>
            <rich_text>
• </rich_text>
            <rich_text scale="h2">	is not good at representing a model's ability to generalize</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">To use it we split in folds the data and predict the n folds we have in the split datas so we can have different R squared values that we can evaluate on and see if our model is actually good</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h3">	We split it in k folds </rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h3">	But it makes it k times harder for the computer well.., to compute</rich_text>
            <rich_text>
	</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>
	
</rich_text>
            <rich_text scale="h1">Excercises</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/supervised-learning-with-scikit-learn/regression-2?ex=9" scale="h2">5-fold cross-validation</rich_text>
            <rich_text>
	</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>
	
</rich_text>
            <rich_text scale="h2">	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/supervised-learning-with-scikit-learn/regression-2?ex=10" scale="h2">K-Fold CV comparison</rich_text>
            <rich_text>
	</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>
</rich_text>
            <encoded_png char_offset="439" justification="left" link=""></encoded_png>
            <codebox char_offset="480" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import the necessary modules
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import cross_val_score

# Create a linear regression object: reg
reg = LinearRegression()

# Compute 5-fold cross-validation scores: cv_scores
cv_scores = cross_val_score(reg, X, y, cv = 5)

# Print the 5-fold cross-validation scores
print(cv_scores)

print("Average 5-Fold CV Score: {}".format(np.mean(cv_scores)))
</codebox>
            <codebox char_offset="507" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import necessary modules
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import cross_val_score


# Create a linear regression object: reg
reg = LinearRegression()

# Perform 3-fold CV
cvscores_3 = cross_val_score(reg, X, y, cv = 3)
print(np.mean(cvscores_3))

# Perform 10-fold CV
cvscores_10 = cross_val_score(reg, X, y, cv = 10)
print(np.mean(cvscores_10))
</codebox>
          </node>
          <node name="Regularized Regreesion" unique_id="27" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1611175386" ts_lastsave="1611621331">
            <rich_text scale="h2">We regularize cause we need to avoid overfitting a model that has too much features or to penalize large coefficients</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">	One method to do this is Ridge Regression
	Is the loss function that is equal to the OLS + and alpha
	</rich_text>
            <rich_text justification="left" scale="h2"></rich_text>
            <rich_text scale="h2">
</rich_text>
            <rich_text scale="h3">		Alpha is a parameter we need to choose
		And we choose the alpha that performs the better on our ridge regression model </rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h3">			is like picking the k in K-NN</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h3">			Alpha controls model complexity</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h3">			A very high alpha can lead to underfitting cause int makes a really vague model or a over free model</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">	Another method is Lasso Regression</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h3">		is like ridge regreession
		It is used to select the most important feautres in a dataset
		It shrinks the coefficients of the features to eliminate the ones that get 0 values</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h3">		Lasso is good cause it can help to explain data to a lot of non technical people working with you</rich_text>
            <rich_text>
		
</rich_text>
            <rich_text scale="h1">Excercises
</rich_text>
            <rich_text scale="h2">	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/supervised-learning-with-scikit-learn/regression-2?ex=12" scale="h2">Regularization I: Lasso</rich_text>
            <rich_text>
	</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>
	
	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/supervised-learning-with-scikit-learn/regression-2?ex=13" scale="h2">Regularization II: Ridg</rich_text>
            <rich_text>e
	</rich_text>
            <rich_text scale="h3">Recall that lasso performs regularization by adding to the loss function a penalty term of the </rich_text>
            <rich_text style="italic" scale="h3">absolute</rich_text>
            <rich_text scale="h3"> value of each coefficient multiplied by some alpha. This is also known as  regularization because the regularization term is the  norm of the coefficients. This is not the only way to regularize, however. 
	If instead you took the sum of the </rich_text>
            <rich_text style="italic" scale="h3">squared</rich_text>
            <rich_text scale="h3"> values of the coefficients multiplied by some alpha - like in Ridge regression - you would be computing the  norm. In this exercise, you will practice fitting ridge regression models over a range of different alphas, and plot cross-validated  scores for each, using this function that we have defined for you, which plots the  score as well as standard error for each alpha:</rich_text>
            <rich_text scale="h1">
	</rich_text>
            <rich_text justification="left" scale="h1"></rich_text>
            <rich_text scale="h1">
	</rich_text>
            <encoded_png char_offset="221" justification="left" link=""></encoded_png>
            <codebox char_offset="872" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import Lasso
from sklearn.linear_model import Lasso

# Instantiate a lasso regressor: lasso
lasso = Lasso(alpha = 0.4, normalize = True)

# Fit the regressor to the data
lasso.fit(X, y)

# Compute and print the coefficients
lasso_coef = lasso.fit(X, y).coef_
print(lasso_coef)

# Plot the coefficients
plt.plot(range(len(df_columns)), lasso_coef)
plt.xticks(range(len(df_columns)), df_columns.values, rotation=60)
plt.margins(0.02)
plt.show()
</codebox>
            <codebox char_offset="1633" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import necessary modules
from sklearn.linear_model import Ridge
from sklearn.model_selection import cross_val_score

# Setup the array of alphas and lists to store scores
alpha_space = np.logspace(-4, 0, 50)
ridge_scores = []
ridge_scores_std = []

# Create a ridge regressor: ridge
ridge = Ridge(normalize=True)

# Compute scores over range of alphas
for alpha in alpha_space:

    # Specify the alpha value to use: ridge.alpha
    ridge.alpha = alpha
    
    # Perform 10-fold CV: ridge_cv_scores
    ridge_cv_scores = cross_val_score(ridge, X, y, cv = 10)
    
    # Append the mean of ridge_cv_scores to ridge_scores
    ridge_scores.append(np.mean(ridge_cv_scores))
    
    # Append the std of ridge_cv_scores to ridge_scores_std
    ridge_scores_std.append(np.std(ridge_cv_scores))

# Display the plot
display_plot(ridge_scores, ridge_scores_std)
</codebox>
          </node>
        </node>
        <node name="Fine-tuning your model" unique_id="28" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1611188564" ts_lastsave="1611551122">
          <rich_text scale="h2">Having trained your model, your next task is to evaluate its performance. In this chapter, you will learn about some of the other metrics available in scikit-learn that will allow you to assess your model's performance in a more nuanced manner. Next, learn to optimize your classification and regression models using hyperparameter tuning.</rich_text>
          <rich_text>

</rich_text>
          <rich_text scale="h1">Chapters</rich_text>
          <rich_text>
</rich_text>
          <rich_text scale="h2">	</rich_text>
          <rich_text link="node 29" scale="h2">How good is your model?</rich_text>
          <rich_text>
</rich_text>
          <rich_text scale="h2">	</rich_text>
          <rich_text link="node 30" scale="h2">Logistic Regression and the ROC curve</rich_text>
          <rich_text>
</rich_text>
          <rich_text scale="h2">	</rich_text>
          <rich_text link="node 33" scale="h2">Area under the ROC curve</rich_text>
          <rich_text>
</rich_text>
          <rich_text scale="h2">	</rich_text>
          <rich_text link="node 34" scale="h2">Hyperparameter tuning</rich_text>
          <rich_text>

</rich_text>
          <node name="How good is your model?" unique_id="29" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1611188640" ts_lastsave="1611189829">
            <rich_text scale="h1">Accuracy is not always a good metric for models</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">	We need to evade class imbalance in our models
	So we need a more nuance metric</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h3">		A Confusion Matrix</rich_text>
            <rich_text>
			</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h3">			We can calculate a more accurate “accuracy”
			Precision if high we have a high false positive accuracy 
			</rich_text>
            <rich_text justification="left" scale="h3"></rich_text>
            <rich_text scale="h3">
			Recall or sensitivity if high we have a high true positive accuracy</rich_text>
            <rich_text>
			</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h3">			F1score </rich_text>
            <rich_text>
			</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>
			
</rich_text>
            <rich_text scale="h1">Excercises</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/supervised-learning-with-scikit-learn/fine-tuning-your-model?ex=2" scale="h2">Metrics for classification</rich_text>
            <rich_text>
		</rich_text>
            <rich_text justification="left"></rich_text>
            <encoded_png char_offset="153" justification="left" link=""></encoded_png>
            <encoded_png char_offset="266" justification="left" link="">iVBORw0KGgoAAAANSUhEUgAAAD8AAAA5CAIAAAAOZGSVAAAAA3NCSVQICAjb4U/gAAAFgklEQVRoge2Ye0xTVxzHf/dyewF5VZAYOiGVVwXhIi1QhKFu4oMhCyIZi9t8ZTqdMzNonNvMdJnRZBp1j2wszsc2ghjJzMbGNp2BAF1KsdRSCSCKEFCnTjcFbO+97b37o4ZgH0DvPSkh4ZP+c3/n5Pf95vb0nJ4vxvM8TFrwiTYgiin3E8eU+4ljyv3EgcB95fmazus94vsIQKx7Y1vnmq27y6t+RuLGU8S6r/+rGQDmJc1BYcZjxLrX6AwAkJWeisKMx4h1r9UbY+SRETPDkbjxFIHu9x8pI2UUKaNu/33vRk8fKaOkMWqO4wCg7HSlXJmbllt87UZPbWPTCyvXRactKVzzzp2795E6BwAAXhAcx7Ese/yHc5KI5FNnzrMsa7VaeZ7v7u1bVLiWpplAuUqRmVfw2pZ7/zyw2WzLSzZmLH2F4zhhcu4Q+O4xDCMIQnvZCAA5mSqCIHx8fADg+7M/bVhdxLAsy1p9SfLs8SPhYaE4jmelpxpM7boWE8oXL3LdNzbpZ4aHxcgjhytBgQEvLV7QpG/lOG5VwVJ/fz97/eF/jwCgp++WGDlnhLu/e/9Bd29/doZyZLF0y7qwUGmDVg8AC+anDdeNVzsBIFQaIljOJcLda3QtAJCd4WKvbNBeJghCraTsjxYL3XzFhON4emqSYDmXiHFvAIBstRIAzGbLro8P2+sMw+oMptTkhOFlU6vR0TRTUpgnDQkWbfgZhLs3tLb7+flSifEA8PXpypnhYfZ6s8FE00xCXPTwzK9OngkJDtq3a6tIr84Idx8WGkL4+GAYdqleW/Nn/bY3X7fX67WXAeC3Sw237twFgKNl3zU26SvKDs2OmoXE8TMI3ms7um6m5RbHq/PeePu9h/8+Gq7nvbqJlFFV1X8oMvOSc14u3vBuW+d1FJu7CzAeaSLCstbwOdlx0VHNF88hbOsOxLcTvbHtidn8fKYKbVt3oHTPstbqC7UAoEqZa7PZEHZ2B7KVwzCsNFZttVrtj0oqUft7JZLOo4By3dM0Q5ISDMNQNRwTbIZivtfExLBiyaJTXxxwKE7uTAHxjullJve7f+re+5kMTTM79x5KWViYkJX/y4U6gV14nr9ytUMSkbzn4GdiDm1Pb33b9xycocgqr6r2mzVv5dptwkRxQJTJ7Nj7qa6ldZyTBwaHvi2vyslUxcqjiguW7indLEyUAESZjNlsMVvocU6u0+homlErKbWKUqsowaI4IMpkeE/2Lq3eCABZru5lHoGjymTG6V6uzCVl1KEvTwLA4qL1pIza/cmR4VGPdVFlMptKP6rT6Mb8nVks9MDgkCxpYVzG8oHBocGhJzabzT4kQBf3cibj60s+MVvuP3iYkqQIDJgWMM0fx5/u2gJ0ce9nMq1tnQCQMtdxixOgS3T39hflLxlZKt2yDgBGyWRM7V15JRsdGj0eHDpfc4mUECOLCfExF6tOOMw0tV8DgJS5Cof6mLou3IPnmYw0JLi/tc5h/ls79q5etWJhVrpzKweMbR0AkOLmePEoC8LB65lMa9u16dLgqOcinIc81cW9nMnQNNPe1e286IXp4l7OZK52dNlsNiWV6HLUU10iRh6ZmF2gVlHnThwjSYm92qDVYxj2+cEPFhetJyUSRdxsTU1FYnyMSOsAYDC1A0COm9DBY13nI4Bh2JDojLTc4nH/1Rv7tOI4rrf/Ns/zm3fuC5qd9nhgEImui9uJsEwmLHR6UGCAu9H39x+NTV9WXlXdbDAV5ee6nClAl3B4dshk7KfveDjw4fZRRhubWoKDAnEMv36zr+Kbw84TBOqO/CJomvGPTJVEJNs/6mUl4/8SR+fHXy/Gpi9Tvlh0oVbjPCpY1/FW7v1MRozuVKYwcUy5nzgmt/v/AZ3uRvGBQAkSAAAAAElFTkSuQmCC</encoded_png>
            <encoded_png char_offset="342" justification="left" link="">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</encoded_png>
            <encoded_png char_offset="359" justification="left" link="">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</encoded_png>
            <codebox char_offset="406" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import necessary modules
from sklearn.metrics import classification_report, confusion_matrix


# Create training and test set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.4, random_state = 42)

# Instantiate a k-NN classifier: knn
knn =KNeighborsClassifier(n_neighbors = 6)

# Fit the classifier to the training data
knn.fit(X_train, y_train)

# Predict the labels of the test data: y_pred
y_pred = knn.predict(X_test)

# Generate the confusion matrix and classification report
print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))
</codebox>
          </node>
          <node name="Logistic Regression and the ROC curve" unique_id="30" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1611262472" ts_lastsave="1611380197">
            <rich_text scale="h1">This is used for classification</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h3">	It outputs probabilities</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h3">		if we wet p greater than 0.5 we labeled it as 1</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h3">		If we get p lower than 0.5 we labeled it as 0</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h2">The ROC curve is when we plot the points of all possible treshholds that we evaluate the treshhold is the rate of p of 0.5 by default so we evaluate with others to see how the probabilites change with the ROC to have an actual useful treshhold that works for our model so the ROC is independant of the model</rich_text>
            <rich_text>


</rich_text>
            <rich_text scale="h1">Exercises</rich_text>
            <rich_text>
	
	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/supervised-learning-with-scikit-learn/fine-tuning-your-model?ex=4" scale="h1">Building a logistic regression model</rich_text>
            <rich_text>
		</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>
		
</rich_text>
            <rich_text scale="h1">	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/supervised-learning-with-scikit-learn/fine-tuning-your-model?ex=5" scale="h1">Plotting an ROC curve</rich_text>
            <rich_text>
		</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>
		
</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>
</rich_text>
            <codebox char_offset="519" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import the necessary modules
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, classification_report

# Create training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.4, random_state=42)

# Create the classifier: logreg
logreg = LogisticRegression()

# Fit the classifier to the training data
logreg.fit(X_train, y_train)

# Predict the labels of the test set: y_pred
y_pred = logreg.predict(X_test)

# Compute and print the confusion matrix and classification report
print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))
</codebox>
            <codebox char_offset="549" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import necessary modules
from sklearn.metrics import roc_curve

# Compute predicted probabilities: y_pred_prob
y_pred_prob = logreg.predict_proba(X_test)[:,1]

# Generate ROC curve values: fpr, tpr, thresholds
fpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)

# Plot ROC curve
plt.plot([0, 1], [0, 1], 'k--')
plt.plot(fpr, tpr, label = "Logistic Regression")
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.show()</codebox>
            <encoded_png char_offset="554" justification="left" link=""></encoded_png>
          </node>
          <node name="Area under the ROC curve" unique_id="33" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1611423057" ts_lastsave="1611551082">
            <rich_text justification="left"></rich_text>
            <codebox char_offset="0" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import necessary modules
from sklearn.metrics import roc_auc_score
from sklearn.model_selection import cross_val_score

# Compute predicted probabilities: y_pred_prob
y_pred_prob = logreg.predict_proba(X_test)[:,1]

# Compute and print AUC score
print("AUC: {}".format(roc_auc_score(y_test, y_pred_prob)))

# Compute cross-validated AUC scores: cv_auc
cv_auc = cross_val_score(logreg, X, y, cv = 5, scoring = 'roc_auc')

# Print list of AUC scores
print("AUC scores computed using 5-fold cross-validation: {}".format(cv_auc))
</codebox>
          </node>
          <node name="Hyperparameter tuning" unique_id="34" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1611551100" ts_lastsave="1611615286">
            <rich_text scale="h1">Hyperparameters are the parameters that need to be specified before fitting a model such as n in knn, alpga in Ridge/lasso, or the parameters of a normal Linear regression</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">	Choosing the correct hyperparameter for tunning your model is try and error but trying in an efficient way such as </rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">		Cross validation and gridsearch using the hyperparameters that we want to tune and at the end we choose the one that got the best score</rich_text>
            <rich_text>
		
		
</rich_text>
            <rich_text scale="h1">Exercises</rich_text>
            <rich_text>

	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/supervised-learning-with-scikit-learn/fine-tuning-your-model?ex=10" scale="h2">Hyperparameter tuning with GridSearchCV</rich_text>
            <rich_text>
	</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>
	
</rich_text>
            <rich_text scale="h2">	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/supervised-learning-with-scikit-learn/fine-tuning-your-model?ex=11" scale="h2">Hyperparameter tuning with RandomizedSearchCV</rich_text>
            <rich_text>
	</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>
	
</rich_text>
            <rich_text scale="h2">	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/supervised-learning-with-scikit-learn/fine-tuning-your-model?ex=14" scale="h2">Hold-out set in practice I: Classification</rich_text>
            <rich_text>
	</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>
	
	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/supervised-learning-with-scikit-learn/fine-tuning-your-model?ex=15" scale="h1">Hold-out set in practice II: Regression</rich_text>
            <rich_text>
	</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>
</rich_text>
            <codebox char_offset="486" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import necessary modules
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import GridSearchCV

# Setup the hyperparameter grid
c_space = np.logspace(-5, 8, 15)
param_grid = {'C': c_space}

# Instantiate a logistic regression classifier: logreg
logreg = LogisticRegression()

# Instantiate the GridSearchCV object: logreg_cv
logreg_cv = GridSearchCV(logreg, param_grid, cv = 5)

# Fit it to the data
logreg_cv.fit(X, y)

# Print the tuned parameters and score
print("Tuned Logistic Regression Parameters: {}".format(logreg_cv.best_params_)) 
print("Best score is {}".format(logreg_cv.best_score_))
</codebox>
            <codebox char_offset="538" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import necessary modules
from scipy.stats import randint
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import RandomizedSearchCV


# Setup the parameters and distributions to sample from: param_dist
param_dist = {"max_depth": [3, None],
              "max_features": randint(1, 9),
              "min_samples_leaf": randint(1, 9),
              "criterion": ["gini", "entropy"]}

# Instantiate a Decision Tree classifier: tree
tree = DecisionTreeClassifier()

# Instantiate the RandomizedSearchCV object: tree_cv
tree_cv = RandomizedSearchCV(tree, param_dist, cv=5)

# Fit it to the data
tree_cv.fit(X, y)

# Print the tuned parameters and score
print("Tuned Decision Tree Parameters: {}".format(tree_cv.best_params_))
print("Best score is {}".format(tree_cv.best_score_))
</codebox>
            <codebox char_offset="587" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import necessary modules
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import GridSearchCV

# Create the hyperparameter grid
c_space = np.logspace(-5, 8, 15)
param_grid = {"C": c_space, 'penalty': ['l1', 'l2']}

# Instantiate the logistic regression classifier: logreg
logreg = LogisticRegression()

# Create train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.4, random_state = 42)

# Instantiate the GridSearchCV object: logreg_cv
logreg_cv = GridSearchCV(logreg, param_grid, cv = 5)

# Fit it to the training data
logreg_cv.fit(X_train, y_train)

# Print the optimal parameters and best score
print("Tuned Logistic Regression Parameter: {}".format(logreg_cv.best_params_))
print("Tuned Logistic Regression Accuracy: {}".format(logreg_cv.best_score_))
</codebox>
            <codebox char_offset="633" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import necessary modules
from sklearn.linear_model import ElasticNet
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import GridSearchCV, train_test_split

# Create train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.4, random_state = 42)

# Create the hyperparameter grid
l1_space = np.linspace(0, 1, 30)
param_grid = {'l1_ratio': l1_space}

# Instantiate the ElasticNet regressor: elastic_net
elastic_net = ElasticNet()

# Setup the GridSearchCV object: gm_cv
gm_cv = GridSearchCV(elastic_net, param_grid, cv=5)

# Fit it to the training data
gm_cv.fit(X_train, y_train)

# Predict on the test set and compute metrics
y_pred = gm_cv.predict(X_test)
r2 = gm_cv.score(X_test, y_test)
mse = mean_squared_error(y_test, y_pred)
print("Tuned ElasticNet l1 ratio: {}".format(gm_cv.best_params_))
print("Tuned ElasticNet R squared: {}".format(r2))
print("Tuned ElasticNet MSE: {}".format(mse))</codebox>
          </node>
        </node>
        <node name="Preprocessing and pipelines" unique_id="35" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1611615314" ts_lastsave="1611620868">
          <rich_text scale="h1">Preprocessing is cleanning and shieeeeet that means that we need to process categorical features into numerical features so will classificating them and giving them a value</rich_text>
          <rich_text>
</rich_text>
          <rich_text scale="h2">	We will use something called dummy variables that helps us to transform this categorical data into numeric</rich_text>
          <rich_text>
	
</rich_text>
          <rich_text scale="h2">	</rich_text>
          <rich_text link="node 36" scale="h2">Preprocessing data</rich_text>
          <rich_text>
</rich_text>
          <rich_text scale="h2">	</rich_text>
          <rich_text link="node 37" scale="h2">Handling missing data</rich_text>
          <rich_text>
</rich_text>
          <rich_text scale="h2">	</rich_text>
          <rich_text link="node 38" scale="h2">Centering and scaling</rich_text>
          <node name="Preprocessing data" unique_id="36" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1611620795" ts_lastsave="1611621403">
            <rich_text scale="h1">Excercises</rich_text>
            <rich_text>
	
	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/supervised-learning-with-scikit-learn/preprocessing-and-pipelines?ex=2" scale="h1">Exploring categorical features</rich_text>
            <rich_text>

	</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>
	
	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/supervised-learning-with-scikit-learn/preprocessing-and-pipelines?ex=3" scale="h1">Creating dummy variables</rich_text>
            <rich_text>
	</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>\
	
</rich_text>
            <rich_text scale="h1">	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/supervised-learning-with-scikit-learn/preprocessing-and-pipelines?ex=4" scale="h1">Regression with categorical features</rich_text>
            <rich_text>
	</rich_text>
            <rich_text justification="left"></rich_text>
            <codebox char_offset="47" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import pandas
import pandas as pd

# Read 'gapminder.csv' into a DataFrame: df
df = pd.read_csv('gapminder.csv')

# Create a boxplot of life expectancy per region
df.boxplot('life', 'Region', rot=60)

# Show the plot
plt.show()
</codebox>
            <codebox char_offset="78" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Create dummy variables: df_region
df_region = pd.get_dummies(df)

# Print the columns of df_region
print(df_region.columns)

# Create dummy variables with drop_first=True: df_region
df_region = pd.get_dummies(df, drop_first = True)

# Print the new columns of df_region
print(df_region.columns)
</codebox>
            <codebox char_offset="122" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import necessary modules
from sklearn.linear_model import Ridge
from sklearn.model_selection import cross_val_score

# Instantiate a ridge regressor: ridge
ridge = Ridge(alpha = 0.5, normalize = True)

# Perform 5-fold cross-validation: ridge_cv
ridge_cv = cross_val_score(ridge, X, y, cv = 5)

# Print the cross-validated scores
print(ridge_cv)
</codebox>
          </node>
          <node name="Handling missing data" unique_id="37" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1611620803" ts_lastsave="1613059186">
            <rich_text scale="h1">We deal with missing data with multiple methods</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">   ◇ Drop missing data from the dataframe but is only used when there are few rows with missing data
   ◇ Impute missing data that is filling the Nan values with some statistical data from the data frame
		like the mean or anything like that</rich_text>
            <rich_text>
   ◇ </rich_text>
            <rich_text scale="h2">		Imputing with a pipeline lets us do everything at once using sklearn pipeline</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h1">Excercises</rich_text>
            <rich_text>
		
</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/supervised-learning-with-scikit-learn/preprocessing-and-pipelines?ex=6">• </rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/supervised-learning-with-scikit-learn/preprocessing-and-pipelines?ex=6" scale="h1">Dropping missing data</rich_text>
            <rich_text>
   ◇ </rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>

</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/supervised-learning-with-scikit-learn/preprocessing-and-pipelines?ex=7" scale="h1">Imputing missing data in a ML Pipeline I</rich_text>
            <rich_text>
	</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>

</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/supervised-learning-with-scikit-learn/preprocessing-and-pipelines?ex=8" scale="h1">Imputing missing data in a ML Pipeline II</rich_text>
            <rich_text>	
</rich_text>
            <rich_text justification="left"></rich_text>
            <codebox char_offset="419" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Convert '?' to NaN
df[df == '?'] = np.nan

# Print the number of NaNs
print(df.isnull().sum())

# Print shape of original DataFrame
print("Shape of Original DataFrame: {}".format(df.shape))

# Drop missing values and print shape of new DataFrame
df = df.dropna()

# Print shape of new DataFrame
print("Shape of DataFrame After Dropping All Rows with Missing Values: {}".format(df.shape))
</codebox>
            <codebox char_offset="464" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import the Imputer module
from sklearn.preprocessing import Imputer
from sklearn.svm import SVC

# Setup the Imputation transformer: imp
imp = Imputer(missing_values='NaN', strategy='most_frequent', axis=0)

# Instantiate the SVC classifier: clf
clf = SVC()

# Setup the pipeline with the required steps: steps
steps = [('imputation', imp),
        ('SVM', clf)]</codebox>
            <codebox char_offset="510" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import necessary modules
from sklearn.preprocessing import Imputer
from sklearn.pipeline import Pipeline
from sklearn.svm import SVC

# Setup the pipeline steps: steps
steps = [('imputation', Imputer(missing_values='NaN', strategy='most_frequent', axis=0)),
        ('SVM', SVC())]

# Create the pipeline: pipeline
pipeline = Pipeline(steps)

# Create training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y , test_size = 0.3, random_state = 42)

# Fit the pipeline to the train set
pipeline.fit(X_train, y_train)

# Predict the labels of the test set
y_pred = pipeline.predict(X_test)

# Compute metrics
print(classification_report(y_test, y_pred))
</codebox>
          </node>
          <node name="Centering and scaling" unique_id="38" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1611620812" ts_lastsave="1613059195">
            <rich_text scale="h1">We scale our data to normalize it</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">	We can standarize our data to make features to be in similar scale from one and another so the distance of the features doesnt influence duly our model</rich_text>
            <rich_text>

</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/supervised-learning-with-scikit-learn/preprocessing-and-pipelines?ex=10" scale="h1">Centering and scaling your data</rich_text>
            <rich_text>
	</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>
	
</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/supervised-learning-with-scikit-learn/preprocessing-and-pipelines?ex=11" scale="h1">Centering and scaling in a pipeline</rich_text>
            <rich_text>
	</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>

</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/supervised-learning-with-scikit-learn/preprocessing-and-pipelines?ex=12" scale="h1">Bringing it all together I: Pipeline for classification</rich_text>
            <rich_text>	
</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>

</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/supervised-learning-with-scikit-learn/preprocessing-and-pipelines?ex=13" scale="h1">Bringing it all together II: Pipeline for regression</rich_text>
            <rich_text>
	</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>

</rich_text>
            <codebox char_offset="221" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Scale the features: X_scaled
X_scaled = scale(X)

# Print the mean and standard deviation of the unscaled features
print("Mean of Unscaled Features: {}".format(np.mean(X))) 
print("Standard Deviation of Unscaled Features: {}".format(np.std(X)))

# Print the mean and standard deviation of the scaled features
print("Mean of Scaled Features: {}".format(np.mean(X_scaled))) 
print("Standard Deviation of Scaled Features: {}".format(np.std(X_scaled)))</codebox>
            <codebox char_offset="262" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import the necessary modules
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline

# Setup the pipeline steps: steps
steps = [('scaler', StandardScaler()),
        ('knn', KNeighborsClassifier())]
        
# Create the pipeline: pipeline
pipeline = Pipeline(steps)

# Create train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 42)

# Fit the pipeline to the training set: knn_scaled
knn_scaled = pipeline.fit(X_train, y_train)

# Instantiate and fit a k-NN classifier to the unscaled data
knn_unscaled = KNeighborsClassifier().fit(X_train, y_train)

# Compute and print metrics
print('Accuracy with Scaling: {}'.format(knn_scaled.score(X_test, y_test)))
print('Accuracy without Scaling: {}'.format(knn_unscaled.score(X_test, y_test)))
</codebox>
            <codebox char_offset="322" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Setup the pipeline
steps = [('scaler', StandardScaler()),
         ('SVM', SVC())]

pipeline = Pipeline(steps)

# Specify the hyperparameter space
parameters = {'SVM__C':[1, 10, 100],
              'SVM__gamma':[0.1, 0.01]}

# Create train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 21)

# Instantiate the GridSearchCV object: cv
cv = GridSearchCV(pipeline, parameters, cv = 3)

# Fit to the training set
cv.fit(X_train, y_train)

# Predict the labels of the test set: y_pred
y_pred = cv.predict(X_test)

# Compute and print metrics
print("Accuracy: {}".format(cv.score(X_test, y_test)))
print(classification_report(y_test, y_pred))
print("Tuned Model Parameters: {}".format(cv.best_params_))
</codebox>
            <codebox char_offset="379" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Setup the pipeline steps: steps
steps = [('imputation', Imputer(missing_values='NaN', strategy='mean', axis=0)),
         ('scaler', StandardScaler()),
         ('elasticnet', ElasticNet())]

# Create the pipeline: pipeline 
pipeline = Pipeline(steps)

# Specify the hyperparameter space
parameters = {'elasticnet__l1_ratio':np.linspace(0,1,30)}

# Create train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.4, random_state = 42)

# Create the GridSearchCV object: gm_cv
gm_cv = GridSearchCV(pipeline, parameters, cv = 3)

# Fit to the training set
gm_cv.fit(X_train, y_train)

# Compute and print the metrics
r2 = gm_cv.score(X_test, y_test)
print("Tuned ElasticNet Alpha: {}".format(gm_cv.best_params_))
print("Tuned ElasticNet R squared: {}".format(r2))
</codebox>
          </node>
        </node>
      </node>
      <node name="Mergin stuff" unique_id="14" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1604938625" ts_lastsave="1610925287">
        <rich_text>
</rich_text>
        <rich_text scale="h1">Self join</rich_text>
        <rich_text>
</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>

</rich_text>
        <rich_text scale="h1">Index Merge for data analisys</rich_text>
        <rich_text>
</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>

</rich_text>
        <rich_text scale="h1">Filtering Join</rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h2">	Anti Join</rich_text>
        <rich_text>	</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h2">	Semi join</rich_text>
        <rich_text>	</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h2">	Concatenation basics</rich_text>
        <rich_text>	</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h2">	Concatenating with keys</rich_text>
        <rich_text>	</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>	
</rich_text>
        <rich_text scale="h2">	Using the append method </rich_text>
        <rich_text>		</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>

</rich_text>
        <rich_text scale="h1">Verifying integrity</rich_text>
        <rich_text>
	
	</rich_text>
        <rich_text scale="h2">Concatenate and merge to find common songs</rich_text>
        <rich_text>

	</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>
	
</rich_text>
        <rich_text scale="h1">Using merge_ordered</rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h3">	Used for ordered data and time series</rich_text>
        <rich_text>
	
</rich_text>
        <rich_text scale="h2">	Correlation between GDP and S&amp;P500</rich_text>
        <rich_text>
	</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>
	
	
</rich_text>
        <rich_text scale="h2">	Phillips curve using merge_ordered()</rich_text>
        <rich_text>
	</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>
	
</rich_text>
        <rich_text scale="h2">	merge_ordered with multiple columns</rich_text>
        <rich_text>
	</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>

</rich_text>
        <rich_text scale="h1">Using merge_asof()</rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h3">	Data sampled from a process</rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h3">	Developing a training set that has no leakage</rich_text>
        <rich_text>
	
</rich_text>
        <rich_text scale="h3">	Using merge_asof() to study stocks</rich_text>
        <rich_text>
	</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>
	
	
	</rich_text>
        <rich_text scale="h3">Using merge_asof() to create dataset</rich_text>
        <rich_text>
	</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>
	
</rich_text>
        <rich_text scale="h2">	</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>

</rich_text>
        <rich_text scale="h1">Selecting data with .query()
</rich_text>
        <rich_text scale="h3">	Subsetting rows with .query()
	</rich_text>
        <rich_text justification="left" scale="h3"></rich_text>
        <rich_text scale="h3">	</rich_text>
        <rich_text>
	
</rich_text>
        <rich_text scale="h1">Reshaping data with .melt()</rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h3">	Using .melt() to reshape government data</rich_text>
        <rich_text>
	</rich_text>
        <rich_text justification="left"></rich_text>
        <rich_text>

</rich_text>
        <rich_text scale="h3">	Using .melt() for stocks vs bond performance</rich_text>
        <rich_text>
	</rich_text>
        <rich_text justification="left"></rich_text>
        <codebox char_offset="11" justification="left" frame_width="100" frame_height="100" width_in_pixels="0" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="1"># Merge the crews table to itself
crews_self_merged = crews.merge(crews, on='id', how='inner',
                                suffixes=('_dir','_crew'))

# Create a boolean index to select the appropriate rows
boolean_filter = ((crews_self_merged['job_dir'] == 'Director') &amp; 
                  (crews_self_merged['job_crew'] != 'Director'))
direct_crews = crews_self_merged[boolean_filter]

# Print the first few rows of direct_crews
print(direct_crews.head())</codebox>
        <codebox char_offset="44" justification="left" frame_width="100" frame_height="100" width_in_pixels="0" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="1"># Merge sequels and financials on index id
sequels_fin = sequels.merge(financials, on='id', how='left')

# Self merge with suffixes as inner join with left on sequel and right on id
orig_seq = sequels_fin.merge(sequels_fin, how='inner', left_on='sequel', 
                             right_on='id', right_index=True,
                             suffixes=('_org','_seq'))

# Add calculation to subtract revenue_org from revenue_seq 
orig_seq['diff'] = orig_seq['revenue_seq'] - orig_seq['revenue_org']

# Select the title_org, title_seq, and diff 
titles_diff = orig_seq[['title_org','title_seq','diff']]

# Print the first rows of the sorted titles_diff
print(titles_diff.sort_values("diff", ascending = False ).head())
</codebox>
        <codebox char_offset="73" justification="left" frame_width="100" frame_height="100" width_in_pixels="0" syntax_highlighting="python3" highlight_brackets="1" show_line_numbers="1"># Merge employees and top_cust
empl_cust = employees.merge(top_cust, on="srid", 
                            how="left", indicator=True)</codebox>
        <codebox char_offset="86" justification="left" frame_width="100" frame_height="100" width_in_pixels="0" syntax_highlighting="python3" highlight_brackets="1" show_line_numbers="1"># Merge the non_mus_tck and top_invoices tables on tid
tracks_invoices = non_mus_tcks.merge(top_invoices, on = 'tid')

# Use .isin() to subset non_mus_tcks to rows with tid in tracks_invoices
top_tracks = non_mus_tcks[non_mus_tcks['tid'].isin(tracks_invoices['tid'])]

# Group the top_tracks by gid and count the tid rows
cnt_by_gid = top_tracks.groupby(['gid'], as_index=False).agg({'tid':'count'})

# Merge the genres table to cnt_by_gid on gid and print
print(cnt_by_gid.merge(genres, on = 'gid'))
</codebox>
        <codebox char_offset="110" justification="left" frame_width="100" frame_height="100" width_in_pixels="0" syntax_highlighting="python3" highlight_brackets="1" show_line_numbers="1"># Concatenate the tracks
tracks_from_albums = pd.concat([tracks_master, tracks_ride, tracks_st],
                               sort=True)
print(tracks_from_albums)</codebox>
        <codebox char_offset="137" justification="left" frame_width="100" frame_height="100" width_in_pixels="0" syntax_highlighting="python3" highlight_brackets="1" show_line_numbers="1"># Concatenate the tables and add keys
inv_jul_thr_sep = pd.concat([inv_jul, inv_aug, inv_sep],
                            ignore_index = False,
                            keys=['7Jul', '8Aug', '9Sep'])

# Group the invoices by the index keys and find avg of the total column
avg_inv_by_month = inv_jul_thr_sep.groupby(level=0).agg({'total': 'mean'})

# Bar plot of avg_inv_by_month
avg_inv_by_month.plot(kind = 'bar')
plt.show()</codebox>
        <codebox char_offset="167" justification="left" frame_width="100" frame_height="100" width_in_pixels="0" syntax_highlighting="python3" highlight_brackets="1" show_line_numbers="1"># Use the .append() method to combine the tracks tables
metallica_tracks = tracks_ride.append([tracks_master, tracks_st], sort=False)

# Merge metallica_tracks and invoice_items
tracks_invoices = metallica_tracks.merge(invoice_items, how = "inner")

# For each tid and name sum the quantity sold
tracks_sold = tracks_invoices.groupby(['tid','name']).agg({'quantity': 'sum'})

# Sort in decending order by quantity and print the results
print(tracks_sold.sort_values(by = 'quantity', ascending = False))
		</codebox>
        <codebox char_offset="238" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="0"># Concatenate the classic tables vertically
classic_18_19 = pd.concat([classic_18, classic_19], ignore_index=True)

# Concatenate the pop tables vertically
pop_18_19 = pd.concat([pop_18, pop_19], ignore_index=True)

# Merge classic_18_19 with pop_18_19
classic_pop = classic_18_19.merge(pop_18_19, on = 'tid',how = 'inner')

# Using .isin(), filter classic_18_19 rows where tid is in classic_pop
popular_classic = classic_18_19[classic_18_19['tid'].isin(classic_pop['tid'])]

# Print popular chart
print(popular_classic)</codebox>
        <codebox char_offset="340" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="0"># Use merge_ordered() to merge gdp and sp500, interpolate missing value
gdp_sp500 = pd.merge_ordered(gdp, sp500, left_on='year', right_on='date', 
                             how='left',  fill_method='ffill')

# Subset the gdp and returns columns
gdp_returns = gdp_sp500[['gdp','returns']]

# Print gdp_returns correlation
print (gdp_returns.corr())</codebox>
        <codebox char_offset="385" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="0"># Use merge_ordered() to merge inflation, unemployment with inner join
inflation_unemploy = pd.merge_ordered(inflation, unemployment,on = 'date', how = 'inner' )

# Print inflation_unemploy 
print(inflation_unemploy)

# Plot a scatter plot of unemployment_rate vs cpi of inflation_unemploy
inflation_unemploy.plot(x = 'unemployment_rate', y = 'cpi', kind = 'scatter')
plt.show()</codebox>
        <codebox char_offset="427" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="0"># Merge gdp and pop on country and date with fill
date_ctry = pd.merge_ordered(gdp, pop, on = ['country', 'date'],
                            fill_method='ffill')

# Print date_ctry
print(date_ctry)</codebox>
        <codebox char_offset="564" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="0"># Use merge_asof() to merge jpm and wells
jpm_wells = pd.merge_asof(jpm, wells, on='date_time', 
                          suffixes=('', '_wells'), direction='nearest')

# Use merge_asof() to merge jpm_wells and bac
jpm_wells_bac = pd.merge_asof(jpm_wells, bac, on='date_time', 
                              suffixes=('_jpm', '_bac'), direction='nearest')

# Compute price diff
price_diffs = jpm_wells_bac.diff()

# Plot the price diff of the close of jpm, wells and bac only
price_diffs.plot(y=['close_jpm','close_wells','close_bac'])
plt.show()</codebox>
        <codebox char_offset="609" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="0"># Merge gdp and recession on date using merge_asof()
gdp_recession = pd.merge_asof(gdp, recession, on = 'date')

# Create a list based on the row value of gdp_recession['econ_status']
is_recession = ['r' if s=='recession' else 'g' for s in gdp_recession['econ_status']]

# Plot a bar chart of gdp_recession
gdp_recession.plot(kind='bar', y='gdp', x='date', color=is_recession, rot=90)
plt.show()</codebox>
        <table char_offset="614" justification="left" col_min="240" col_max="240" col_widths="0,0,0">
          <row>
            <cell>Has an argument that can be set to forward to select the first row in the right table whose key column is greater than or equal to the left's</cell>
            <cell>The functions can be used when working with ordered or time-series data</cell>
            <cell>It allows for a right join during the merge</cell>
          </row>
          <row>
            <cell>After matching two tables, if there are missing values at the top of the table from the right table, this function can fill them in
It can be used todo fuzzy matching of dates between tables</cell>
            <cell>The functions can set the suffix for overlapping column names</cell>
            <cell>If it cannot match the rows of the tables exactly, it can use forward fill to interpolate the missing data.</cell>
          </row>
          <row>
            <cell>merge_asof()</cell>
            <cell>both</cell>
            <cell>merge_ordered</cell>
          </row>
        </table>
        <codebox char_offset="678" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="0"># Merge gdp and pop on date and country with fill
gdp_pop = pd.merge_ordered(gdp, pop, on=['country','date'], fill_method='ffill')

# Add a column named gdp_per_capita to gdp_pop that divides the gdp by pop
gdp_pop['gdp_per_capita'] = gdp_pop['gdp'] / gdp_pop['pop']

# Pivot data so gdp_per_capita, where index is date and columns is country
gdp_pivot = gdp_pop.pivot_table('gdp_per_capita', 'date', 'country')

# Select dates equal to or greater than 1991-01-01
recent_gdp_pop = gdp_pivot.query('date &gt;= "1991-01-01"')

# Plot recent_gdp_pop
recent_gdp_pop.plot(rot=90)
plt.show()</codebox>
        <codebox char_offset="754" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># unpivot everything besides the year column
ur_tall = ur_wide.melt(id_vars = ['year'], var_name = 'month', value_name = 'unempl_rate')


# Create a date column using the month and year columns of ur_tall
ur_tall['date'] = pd.to_datetime(ur_tall['month'] + '-' + ur_tall['year'])

# Sort ur_tall by date in ascending order
ur_sorted = ur_tall.sort_values(by = 'date', ascending = True)

# Plot the unempl_rate by date
ur_sorted.plot(x = 'date', y = 'unempl_rate')
plt.show()</codebox>
        <codebox char_offset="804" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Use melt on ten_yr, unpivot everything besides the metric column
bond_perc = ten_yr.melt(id_vars = 'metric', var_name = 'date', value_name = 'close')

# Use query on bond_perc to select only the rows where metric=close
bond_perc_close = bond_perc.query('metric == "close"')

# Merge (ordered) dji and bond_perc_close on date with an inner join
dow_bond = pd.merge_ordered(dji, bond_perc_close, on = 'date', how = 'inner', suffixes = ('_dow', '_bond'))


# Plot only the close_dow and close_bond columns
dow_bond.plot(y =['close_dow', 'close_bond'] , x='date', rot=90)
plt.show()</codebox>
      </node>
      <node name="Data Types for Data Science in Python" unique_id="20" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1610925287" ts_lastsave="1610925716">
        <rich_text scale="h1">Course contents</rich_text>
        <rich_text>
   ◇ </rich_text>
        <rich_text link="node 21" scale="h2">Fundamental data types</rich_text>
        <node name="Fundamental data types" unique_id="21" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1610925309" ts_lastsave="1610927003">
          <rich_text>
</rich_text>
          <rich_text scale="h2">Using and unpacking tuples</rich_text>
          <rich_text>
	</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>

</rich_text>
          <rich_text scale="h1">Sets for unordered and unique data</rich_text>
          <rich_text>
</rich_text>
          <rich_text scale="h3">	Finding all the data and the overlapping data between sets</rich_text>
          <rich_text>
	</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>
	
</rich_text>
          <rich_text scale="h3">	Determining set differences</rich_text>
          <rich_text>
	</rich_text>
          <rich_text justification="left"></rich_text>
          <rich_text>


</rich_text>
          <codebox char_offset="29" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Pair up the girl and boy names: pairs
pairs = zip(girl_names, boy_names)

# Iterate over pairs
for idx, pair in enumerate(pairs):
    # Unpack pair: girl_name, boy_name
    girl_name, boy_name = pair
    # Print the rank and names associated with each rank
    print('Rank {}: {} and {}'.format(idx, girl_name, boy_name))</codebox>
          <codebox char_offset="128" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Find the union: all_names
all_names = baby_names_2011.union(baby_names_2014)

# Print the count of names in all_names
print(len(all_names))

# Find the intersection: overlapping_names
overlapping_names = baby_names_2011.intersection(baby_names_2014)

# Print the count of names in overlapping_names
print(len(overlapping_names))</codebox>
          <codebox char_offset="162" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Create the empty set: baby_names_2011
baby_names_2011 = set()

# Loop over records and add the names from 2011 to the baby_names_2011 set
for row in records:
    # Check if the first column is '2011'
    if row[0] == '2011':
        # Add the fourth column to the set
        baby_names_2011.add(row[3])

# Find the difference between 2011 and 2014: differences
differences = baby_names_2011.difference(baby_names_2014)

# Print the differences
print(differences)</codebox>
        </node>
      </node>
      <node name="Unsupervised Learning in Python" unique_id="39" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1611685195" ts_lastsave="1612315530">
        <rich_text scale="h1">It finds patterns in data</rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h2">   ◇ Clustering costumers by their purchases
   ◇ Compressing data
   ◇ Is learning without labels in prediction without a guidance</rich_text>
        <rich_text>

</rich_text>
        <rich_text scale="h1">Course content
	</rich_text>
        <rich_text link="node 41" scale="h1">Clustering</rich_text>
        <rich_text scale="h1">
	</rich_text>
        <rich_text link="node 45" scale="h1">Visualization with hierarchical clustering and t-SNE</rich_text>
        <rich_text scale="h1">
	</rich_text>
        <rich_text link="node 52" scale="h1">Decorrelating your data and dimension reduction</rich_text>
        <rich_text scale="h1">
	</rich_text>
        <rich_text link="node 56" scale="h1">Discovering interpretable features</rich_text>
        <rich_text scale="h1">


 </rich_text>
        <node name="Clustering" unique_id="41" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1611709944" ts_lastsave="1611712516">
          <rich_text scale="h1">Clustering is see how data distributes itself to classificated it with labels and predicting new data with the correct label</rich_text>
          <rich_text>
</rich_text>
          <rich_text scale="h2">	</rich_text>
          <rich_text link="node 40" scale="h2">K-means</rich_text>
          <rich_text>
</rich_text>
          <rich_text scale="h2">	</rich_text>
          <rich_text link="node 42" scale="h2">Evaluating a clustering</rich_text>
          <rich_text>	
</rich_text>
          <rich_text scale="h2">	T</rich_text>
          <rich_text link="node 43" scale="h2">ransforming features for better clusterings</rich_text>
          <rich_text>
</rich_text>
          <node name="K-means" unique_id="40" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1611708908" ts_lastsave="1611711440">
            <rich_text scale="h1">K-means</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h3">	Remembers the mean of each cluster this points of data are called centroid so what it does it's that it check the closest centroid to a data point we have so it can compare it and classify it</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h1">Excercises</rich_text>
            <rich_text>

</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/unsupervised-learning-in-python/clustering-for-dataset-exploration?ex=3" scale="h1">Clustering 2D points</rich_text>
            <rich_text>
	</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>
	
</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/unsupervised-learning-in-python/clustering-for-dataset-exploration?ex=4" scale="h1">Inspect your clustering</rich_text>
            <rich_text>
	</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>
</rich_text>
            <codebox char_offset="236" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import KMeans
from sklearn.cluster import KMeans

# Create a KMeans instance with 3 clusters: model
model = KMeans(n_clusters = 3)

# Fit model to points
model.fit(points)

# Determine the cluster labels of new_points: labels
labels = model.predict(new_points)

# Print cluster labels of new_points
print(labels)
</codebox>
            <codebox char_offset="265" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import pyplot
import matplotlib.pyplot as plt

# Assign the columns of new_points: xs and ys
xs = new_points[:,0]
ys = new_points[:,1]

# Make a scatter plot of xs and ys, using labels to define the colors
plt.scatter(xs, ys, c = labels, alpha = 0.5)

# Assign the cluster centers: centroids
centroids = model.cluster_centers_

# Assign the columns of centroids: centroids_x, centroids_y
centroids_x = centroids[:,0]
centroids_y = centroids[:,1]

# Make a scatter plot of centroids_x and centroids_y
plt.scatter(centroids_x, centroids_y, marker = 'D', s = 50)
plt.show()
</codebox>
          </node>
          <node name="Evalutating a clustering" unique_id="42" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1611711521" ts_lastsave="1611712371">
            <rich_text scale="h1">We use cross tabulations to evaluate the clusters</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">	First we align labels and columns</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">	Then we cross tab the labels and columns so that we know the number of each classification</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">	A good cluster is tighter</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">	You measure the spreaqd of the cluster is is loewr is better</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">	Distance from each sample to its centroid that we classified it</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">	We choose the number of clusters by choosing an elbow in the inertia plot that shows us the inertia slowly decreases</rich_text>
            <rich_text>
		</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>
		
</rich_text>
            <rich_text scale="h1">Excercises </rich_text>
            <rich_text>

</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/unsupervised-learning-in-python/clustering-for-dataset-exploration?ex=6" scale="h1">How many clusters of grain?</rich_text>
            <rich_text>
	</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>

</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/unsupervised-learning-in-python/clustering-for-dataset-exploration?ex=7" scale="h1">Evaluating the grain clustering</rich_text>
            <rich_text>
	</rich_text>
            <rich_text justification="left"></rich_text>
            <encoded_png char_offset="451" justification="left" link=""></encoded_png>
            <codebox char_offset="498" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1">ks = range(1, 6)
inertias = []

for k in ks:
    # Create a KMeans instance with k clusters: model
    model = KMeans(n_clusters = k)
    
    # Fit model to samples
    model.fit(samples)
    
    # Append the inertia to the list of inertias
    inertias.append(model.inertia_)
    
# Plot ks vs inertias
plt.plot(ks, inertias, '-o')
plt.xlabel('number of clusters, k')
plt.ylabel('inertia')
plt.xticks(ks)
plt.show()</codebox>
            <codebox char_offset="534" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Create a KMeans model with 3 clusters: model
model = KMeans(n_clusters = 3)

# Use fit_predict to fit model and obtain cluster labels: labels
labels = model.fit_predict(samples)

# Create a DataFrame with labels and varieties as columns: df
df = pd.DataFrame({'labels': labels, 'varieties': varieties})

# Create crosstab: ct
ct = pd.crosstab(df['labels'], df['varieties'])

# Display ct
print(ct)
</codebox>
          </node>
          <node name="Transforming features for better clusterings" unique_id="43" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1611712506" ts_lastsave="1611794886">
            <rich_text scale="h1">The variance of a feature measures the spread of its values in clustering</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h1">   ◇ A feature variance measures its influence on the model</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">      ▪ We can measure it and transform it to normalize in a way our data with a standard scaler</rich_text>
            <rich_text>
</rich_text>
            <rich_text justification="fill" scale="h2">         - We standarized data to transform each fature to have mean 0 and variance 1</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">         - We first standarized then we kmean the data</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h1">Excercises</rich_text>
            <rich_text>
	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/unsupervised-learning-in-python/clustering-for-dataset-exploration?ex=9" scale="h1">Scaling fish data for clustering</rich_text>
            <rich_text>
	</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>

	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/unsupervised-learning-in-python/clustering-for-dataset-exploration?ex=10" scale="h1">Clustering the fish data</rich_text>
            <rich_text>
		</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>
		
	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/unsupervised-learning-in-python/clustering-for-dataset-exploration?ex=11" scale="h1">Clustering stocks using KMeans</rich_text>
            <rich_text>
	</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>
	
	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/unsupervised-learning-in-python/clustering-for-dataset-exploration?ex=12" scale="h1">Which stocks move together?</rich_text>
            <rich_text>
	</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>



</rich_text>
            <codebox char_offset="419" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Perform the necessary imports
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans

# Create scaler: scaler
scaler = StanderdScaler()

# Create KMeans instance: kmeans
kmeans = KMeans(n_clusters = 4)
# Create a pipeline called pipeline that chains scaler and kmeans. To do this, you just need to pass them in as arguments to make_pipeline().
# Create pipeline: pipeline
pipeline = make_pipeline(scaler, kmeans)
</codebox>
            <codebox char_offset="450" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import pandas
import pandas as pd

# Fit the pipeline to samples
pipeline.fit(samples)

# Calculate the cluster labels: labels
labels = pipeline.predict(samples)

# Create a DataFrame with labels and species as columns: df
df = pd.DataFrame({'labels' : labels, 'species' : species})

# Create crosstab: ct
ct = pd.crosstab(df['labels'], df['species'])

# Display ct
print(ct)
</codebox>
            <codebox char_offset="488" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import Normalizer
from sklearn.preprocessing import Normalizer
# Create a normalizer: normalizer
normalizer = Normalizer()

# Create a KMeans model with 10 clusters: kmeans
kmeans = KMeans(n_clusters = 10)

# Make a pipeline chaining normalizer and kmeans: pipeline
pipeline = make_pipeline(normalizer, kmeans)

# Fit pipeline to the daily price movements
pipeline.fit(movements)
</codebox>
            <codebox char_offset="522" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import pandas
import pandas as pd

# Predict the cluster labels: labels
labels = pipeline.predict(movements)

# Create a DataFrame aligning labels and companies: df
df = pd.DataFrame({'labels': labels, 'companies': companies})

# Display df sorted by cluster label
print(df.sort_values('labels'))
</codebox>
          </node>
        </node>
        <node name="Visualization with hierarchical clustering and t-SNE" unique_id="45" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1611794906" ts_lastsave="1612150590">
          <rich_text scale="h1">Visualizations help us to share our findings so having a good way to format them</rich_text>
          <rich_text>
</rich_text>
          <rich_text scale="h2">	</rich_text>
          <rich_text link="node 46" scale="h2">Visualizing hierarchies</rich_text>
          <rich_text>
</rich_text>
          <rich_text scale="h2">	</rich_text>
          <rich_text link="node 50" scale="h2">Cluster labels in hierarchical clustering</rich_text>
          <rich_text>
</rich_text>
          <rich_text scale="h2">	</rich_text>
          <rich_text link="node 51" scale="h2">t-SNE for 2-dimensional maps</rich_text>
          <rich_text>
</rich_text>
          <node name="Visualizing hierarchies" unique_id="46" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1611795199" ts_lastsave="1611797801">
            <rich_text scale="h1">TSNE</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">	Creates a 2D map of a dataset</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h1">Hierarchical clustering</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">	Make a tree of hirarchies of our cluster</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">	So it just makes a tree of clusters of any datasets</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">		In the beging every label has its cluster</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">		Next the two clusters merged</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">		At the end it agglomerates everything on a single cluster</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">			The name of the visualization is called a dendogram</rich_text>
            <rich_text>
			
			
</rich_text>
            <rich_text scale="h1">Excercises</rich_text>
            <rich_text>
	
	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/unsupervised-learning-in-python/visualization-with-hierarchical-clustering-and-t-sne?ex=3" scale="h1">Hierarchical clustering of the grain data</rich_text>
            <rich_text>
		</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>
		
	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/unsupervised-learning-in-python/visualization-with-hierarchical-clustering-and-t-sne?ex=4" scale="h1">Hierarchies of stocks</rich_text>
            <rich_text>
		</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>
</rich_text>
            <codebox char_offset="411" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Perform the necessary imports
from scipy.cluster.hierarchy import linkage, dendrogram
import matplotlib.pyplot as plt

# Calculate the linkage: mergings
mergings =linkage(samples, method = 'complete')

# Plot the dendrogram, using varieties as labels
dendrogram(mergings,
           labels=varieties,
           leaf_rotation=90,
           leaf_font_size=6,
)
plt.show()
</codebox>
            <codebox char_offset="441" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import normalize
from sklearn.preprocessing import normalize

# Normalize the movements: normalized_movements
normalized_movements = normalize(movements)

# Calculate the linkage: mergings
mergings = linkage(normalized_movements, method = 'complete')

# Plot the dendrogram
dendrogram(mergings,labels = companies, leaf_rotation = 90, leaf_font_size = 6 )
plt.show()
</codebox>
          </node>
          <node name="Cluster labels in hierarchical clustering" unique_id="50" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1612148237" ts_lastsave="1612150526">
            <rich_text scale="h1">A hierarchy is especified by its level on the dendogram</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">	Heigh equals the distance between merging clusters</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">		The height tells us the max distance between merging clusters</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">		So dont merge the clusters if they are that far a part</rich_text>
            <rich_text>
		
</rich_text>
            <rich_text scale="h1">Excercises</rich_text>
            <rich_text>
	
	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/unsupervised-learning-in-python/visualization-with-hierarchical-clustering-and-t-sne?ex=7" scale="h1">Different linkage, different hierarchical clustering!</rich_text>
            <rich_text>
		</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>

	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/unsupervised-learning-in-python/visualization-with-hierarchical-clustering-and-t-sne?ex=9" scale="h1">Extracting the cluster labels</rich_text>
            <rich_text>
		</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>

	</rich_text>
            <codebox char_offset="302" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Perform the necessary imports
import matplotlib.pyplot as plt
from scipy.cluster.hierarchy import linkage, dendrogram

# Calculate the linkage: mergings
mergings = linkage(samples, method = 'single')

# Plot the dendrogram
dendrogram(mergings, labels = country_names, leaf_rotation = 90, leaf_font_size = 6)
plt.show()
</codebox>
            <codebox char_offset="338" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Perform the necessary imports
import pandas as pd
from scipy.cluster.hierarchy import fcluster

# Use fcluster to extract labels: labels
labels = fcluster(mergings, 6, criterion = 'distance')

# Create a DataFrame with labels and varieties as columns: df
df = pd.DataFrame({'labels': labels, 'varieties': varieties})

# Create crosstab: ct
ct = pd.crosstab(df['labels'], df['varieties'])

# Display ct
print(ct)
</codebox>
          </node>
          <node name="t-SNE for 2-dimensional maps" unique_id="51" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1612150578" ts_lastsave="1612151750">
            <rich_text scale="h1">T-distributed stochastic neighbor embedding</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h1">	Maps samples to 2D spaces or 3D</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">	This is cause data can be presented in multiple dimensions or clusters</rich_text>
            <rich_text>
	
</rich_text>
            <rich_text scale="h1">Excercises</rich_text>
            <rich_text>

	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/unsupervised-learning-in-python/visualization-with-hierarchical-clustering-and-t-sne?ex=11" scale="h1">t-SNE visualization of grain dataset</rich_text>
            <rich_text>
		</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>
		
	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/unsupervised-learning-in-python/visualization-with-hierarchical-clustering-and-t-sne?ex=12" scale="h1">A t-SNE map of the stock market</rich_text>
            <rich_text>
		</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>
</rich_text>
            <codebox char_offset="203" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import TSNE
from sklearn.manifold import TSNE

# Create a TSNE instance: model
model = TSNE(learning_rate = 200)

# Apply fit_transform to samples: tsne_features
tsne_features = model.fit_transform(samples)

# Select the 0th feature: xs
xs = tsne_features[:,0]

# Select the 1st feature: ys
ys = tsne_features[:,1]

# Scatter plot, coloring by variety_numbers
plt.scatter(xs, ys, c = variety_numbers)
plt.show()
</codebox>
            <codebox char_offset="243" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import TSNE
from sklearn.manifold import TSNE

# Create a TSNE instance: model
model = TSNE(learning_rate = 50)

# Apply fit_transform to normalized_movements: tsne_features
tsne_features = model.fit_transform(normalized_movements)

# Select the 0th feature: xs
xs = tsne_features[:,0]

# Select the 1th feature: ys
ys = tsne_features[:,1]

# Scatter plot
plt.scatter(xs, ys, alpha= 0.5)

# Annotate the points
for x, y, company in zip(xs, ys, companies):
    plt.annotate(company, (x, y), fontsize=5, alpha=0.75)
plt.show()</codebox>
          </node>
        </node>
        <node name="Decorrelating your data and dimension reduction" unique_id="52" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1612151770" ts_lastsave="1612315537">
          <rich_text scale="h1">Dimension reduction helps us with computation, storage and noise features that makes our lifes harder
	Principal Component Analysis is a tool that help us or PCA</rich_text>
          <rich_text>

</rich_text>
          <rich_text scale="h2">	</rich_text>
          <rich_text link="node 53" scale="h2">Visualizing the PCA transformation</rich_text>
          <rich_text>
</rich_text>
          <rich_text scale="h2">	</rich_text>
          <rich_text link="node 54" scale="h2">Intrinsic dimension</rich_text>
          <rich_text>
</rich_text>
          <rich_text scale="h2">	</rich_text>
          <rich_text link="node 55" scale="h2">Dimension reduction with PCA</rich_text>
          <node name="Visualizing the PCA transformation" unique_id="53" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1612151812" ts_lastsave="1612156409">
            <rich_text scale="h1">PCA rotates data samples to be aligned with the axes</rich_text>
            <rich_text>
	</rich_text>
            <rich_text scale="h2">Shifts data samples so that they have mean 0</rich_text>
            <rich_text>
		</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">	PCA decorrelates the dat</rich_text>
            <rich_text>a
</rich_text>
            <rich_text scale="h2">		we can correlate them with pearson correlation</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">	Principal components analysis</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">		It measures the direction of the variance in the data</rich_text>
            <rich_text>
		</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h1">Excercises</rich_text>
            <rich_text>
	
	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/unsupervised-learning-in-python/decorrelating-your-data-and-dimension-reduction?ex=2" scale="h1">Correlated data in nature</rich_text>
            <rich_text>
		</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>
		
	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/unsupervised-learning-in-python/decorrelating-your-data-and-dimension-reduction?ex=3" scale="h1">Decorrelating the grain measurements with PCA</rich_text>
            <rich_text>
		</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>
</rich_text>
            <encoded_png char_offset="101" justification="left" link="">iVBORw0KGgoAAAANSUhEUgAAAxQAAAFACAIAAACqYa0OAAAAA3NCSVQICAjb4U/gAAAgAElEQVR4nOzdd3wVVdo48DMzt7fcm3vTE9J7CAkJIYTelCYsi4uCrgWFFxcF0deKve+qq7tWUFRQQCnSe02QBAgthfSQnty0m9vrlN8f52V+900QybtIssvz/SOfZDJ37pm5d848c85zzhAcx6HbXlVV1c6dO++9996wsDCO4wiC+Bc3uGnTJo/Hs2DBAqFQeFNK+K/o6enZunVrRETE1KlTB7os/xKXy7Vu3bqIiIhJkyYJBAKEkNPpLCkpqa2t7ejoIEkyMjJy+PDhQUFBvV7IcdzJkydra2uNRqNIJIqKiho7dqxCoei1mslkOnjwYGtrq1wuz87OTklJ+de/CQCA/mJZliTJgoKCX375RSAQ0DRNEIREIgkMDMzJyQkODu77kuLi4uLi4q6uLoIgAgMD4+PjExMTxWJxr9UaGhr279/vdrvnzp17g7V9e3v72bNn6+vrrVZrZmbmlClToFoACCHEDTIsy7744ovvvPOOy+ViGIZhGJZlvf/Lsmzf5RzHWa3Wjz/++OWXX7506RLDMDRN3+ALOY5bv349Qmj//v0cx9E0/ZslZBiG/+WaG4yJiQkKCrJYLCzL0jR9zXV6bfCa6/ALr7POdTaCfy8tLRWLxX/605/4Jd7rX79s3NVD95vLe23w+tvsW+br7xf+NLu7uymKmjdvnsVi4TjOarUuWrTI398/MDAwISEhJCREpVKNGTPm008/dbvd/M42NzcvXrw4MDBQp9PFxMSEhoaqVKrp06eXlpZ6H5Di4uLJkycrlcqoqCh/f//w8PCXXnqpoaHhN/cCAHBz4fP3qaeeQggFBAQkJCTEx8cHBwfL5fLMzMw9e/Z4r1xYWLh06dLw8HBfX9/Y2NjY2NiAgIDIyMi77rpr37593mvabLa33noLX/j+9re/cV6nf1+45iktLZ05c6ZWqw0NDY2Kinr99ddx5c/91jWFu24dy7Ls+vXrn3766crKyl4r8Nv31msLva4LfTd+4xeLG6mowTUNuuCJ47ioqKjs7OwbXx9//Farddq0aQkJCQcOHOjvO27evFkkEh09epT7le9uf2VnZ6empuJr/ICrqKgICwt75JFHBrog/yqDwRAcHPzII49YrVaO40wm00MPPfTZZ5/V1dW1t7fr9fq1a9eGhob6+flt3LiRu/rFeOGFF0iSfP3116urq9vb29va2r7++muE0MMPP4y3w3FcU1PTuHHjtFrtvn37zGZzeXn5/PnzxWLxY489hutxAMAt4/F4OI575ZVXRCLRmjVrOjo6Ojs79Xr9+vXr5XJ5aGhofX09x3Esy+7bt2/o0KEKheKVV16pra1tb29vb2+vqqr6+uuvZ82a9cILL+AN4lq9sLAwKysrNDQ0ICBgxIgR3d3dv1mSL774QqVS/eUvfzGZTDabzeFw3Kx9XLp0qb+//5kzZ27WBsEtJhjARq++PB5PR0eHQCAgSbKyshL3eWk0Go1Gg1ewWCwmk4mmaZIk5XK5Wq2mKIogCI7jamtrWZYVCARtbW0NDQ00TavVaq1Wy3Gcw+Gw2+1Op5OmaYqiFAqFWq32bnrlrp6u+PfrlJDjOL1e73K5hgwZYrVae3p6EEIKhcLHxwd3JHEcRxAEbm1CCJnNZpPJxDCMSCRSq9UymazXBh0Oh9FodLlcJEkqlUrvgnEc19TUJJFI/P39u7u7rVYrQkgsFvv6+opEIu+NsCxrNBptNhtN0xKJRK1WS6VS7xVwy433+maz2WKx4AMikUiUSmWvl/CfSGdnJ0EQWq3W+005jmtpaUEIBQQE4I/J+6MRCoUKhUImk1EUdZ2DyR8cvL5SqSRJ0nsFl8tlMpmcTifHcWq1miRJfGDxIVIqlR9//LFCoeDf5d57721ubn7vvfeOHz++YMECgiBcLtcvv/ySmJg4d+7cmJgYvNq8efNWr15dUlJiMBjkcrnD4Thx4kR+fv6SJUumT5+OEEpISHjsscfKysqOHTuWn58/fvx43I9wnX0BANwsuBJmWdbj8SiVSj8/P7z8/vvv37lz57Zt2woKCsLDw6uqqr755puamppXXnnlySeflEgkeDV/f/+YmJgZM2a0t7fjJbjGOH/+fFFR0ZIlS1wu15o1ayoqKnJycrhf6bnzeDxtbW1lZWUymUyj0ZjNZpqmQ0ND8X8ZhrFYLDabzePxCAQCHx8fpVLp/XKXy2U2m51OJ8MwAoFApVIplUr+jfR6vc1mk0qlTU1Nfn5+HMdJpdLAwECPx1NTUxMeHi6Xy/lNud3utrY2tVrt4+ODELLb7d3d3RKJxNfX12Qymc1moVAYGBiIq0GGYcxms9VqxdcCjUbDHxbMZrMZjUa3202SpEgkkkqlCoUCX7xAvwyuQ9bY2LhixYorV660t7fffffdJElyHPdf//Vfy5YtQwh1dHR8++23+/fvt1gsQqFw2LBhDz744KhRowiCMJlMS5YsKS8vp2n6jTfe+Oc//+l2uxcsWLBq1aqurq4dO3YUFBQ0NjYajUaBQJCVlfX444/HxcXx78vHkr9ZQpvN9vTTT1++fPnHH3/cuHHj8ePHbTZbZmbmgw8+OGLECL6LneM4iqLq6uo2b9585syZrq4ujUbz8MMPL1iwwDue6Ozs3L1795YtW9rb2wUCwejRo5cuXRoXF4fPMYfDsXDhwtTU1JUrV/79738vKSlxOBzh4eFLly694447+I243e7S0tLvvvvu7Nmzbrfb39//3nvvvfvuuxUKBa4XvPeO4ziGYcrKyjZs2HDy5Emn0ymRSEJCQu65557Zs2f3Co8Igujs7Pzv//5vm832zjvvJCcn8//t7u5+5JFHpFLpRx99FBkZiVt9Dhw4YLfbxWKxj4/PpEmT7r777sjIyF87knq9fvXq1YcPH3Y4HD4+PuPGjfvDH/4wbNgwvn7xeDy7du3asmXLlStXJBLJuHHjFi5ciL8SeAWCIHBtwpNKpXFxcSRJGo1Gfh18wL3rRxyEKZVKvL9GozE/P18mk2VlZXEcR9O0UCiMiYnJysrauHFjUVHR+PHjb+S7AQC4iXCthTuYKIrCP8PDw0mSbGtrQwjl5uYWFhZmZmbeddddEonE+w6HIIigoCA+6iIIwmaznThxQq1Wjxs3zuPxfP/998eOHcvJyfm1BKb6+vqlS5cWFxdbLJbvvvtu7969Npttx44dSUlJDMMUFBTs3LnzwoULPT09crn8zjvvXLZsGX+T73Q6d+zYsW/fvoaGBqvVKpfLp0yZMn/+/NjYWIIgSJJ87rnntm7dShDE888/L5fLOY7LzMz8/PPPa2pqpk+fvnr16unTp/O7U1VVdd999y1fvvyRRx5BCOXn57/++utpaWn33Xffpk2bcnNzo6Oj//nPf4aEhDgcjosXL/7000+FhYUOh8Pf3//++++/++67+Rtjk8n03Xffbd++3Ww2i0QinU6XlJT08MMPJyYm/loQCX7N4AqelErlxIkTCwoKcFYKvuzhKKe9vX3ZsmW4GSAjI8NisZw5c+bIkSN///vf58yZIxQKJ06caDAYLBZLVlZWbGysx+NJSkpCCFVVVR0+fJim6ZiYGKlUajAY9uzZU1hY+O233yYkJNx42fB3i2GYK1euFBcXv/LKK263e/To0Z2dncePHy8oKHjjjTf++Mc/4u+fWCxuaWl5++23aZpOTk7GJxvuwr///vvxWVFSUvLuu+8WFBSkpqZOmDDBarUeOnTo/PnzL7/88uTJk0mS9Hg89fX1jY2NBoNBIBCMHDmyq6vr1KlTjz/++KZNmzIyMhBCNE1///33n332mcPhyMnJ0Wq1xcXFzz77bGlp6UsvvaRWq3vtBUEQubm5b7/9dnNzc3Z2tr+/v9vtrq2tvXjx4h133OEdPOGoy9/f39/f/+uvvz5//jwOnnAVdvTo0dOnT//Xf/2XWq12u92vvPLKzp07J0yYEBYW5vF42tvbKyoqmpqaIiMjr3lONjU1PfbYY+fPn588eXJQUFBdXd369ev37Nnz+uuvz5w5E7/kq6++evvtt/38/NLS0vz8/CorK59++mmn04kLds0PyOFwVFZWIoS0Wi1eIhKJZs6c+fLLL69bt+6ee+5Rq9Usy+7fv7+uru6NN97w9/dHCFmt1kuXLvn4+CQkJPDBVmBgYGJiotPpbGhouPEvCQDgZsH1Bk4b5U95nAuBo4GzZ8+2tbU99thj0dHRCKG+bcPevQHV1dUHDhzIyMjIyMgQCoXJyck//vjjc88992tjepRK5ZQpUxwOx+XLlxMSErKzs10uF75b++GHH9577z2pVBofHz9s2LCuri7ckv3ZZ5/pdDqEkNVq3bJli8fjSU1NpSiqqalp7dq1ubm5L7zwwpQpUxBCo0ePvnjxYktLy6hRo8LCwliWjYyMFIlEFoulqakJ3/vh2JEgCLvdfvny5a6uLlwwk8mEMxDq6uqUSuWkSZN8fHwoivJ4PD/88MMHH3ygUCiGDx+uVCqrq6tXrVrV0NCwYsUKpVLpdDr/+te/rl69esKECRkZGRzHtbW1FRUVNTY2QvD0f3Gz+v9uopSUlIkTJ/Za+I9//AMh9Pzzz/MJ3QcPHlSr1SNGjOjo6OA4zmKxzJ07d/jw4YcPH/Z+oV6vv3LlCu6Vw44ePSqVSt966y2Xy4WX/Pjjjwgh/MLrJ4ybTKYJEyaQJDljxoyuri68cMOGDQqFYtasWVeuXMFLJk6cSBDEE088YTab8ZKSkhKlUjl27Fi8fafTuXz5cplM9tJLL9ntdrzOzp07lUrlnDlz6urq8HvFxsaKRKKPPvqIz8TaunWrQCBYsWIF/vPSpUvR0dEajWbbtm14icVimTZtmlKp3LJlC15SUVERGBj40EMP4T+XL18ul8tXr17N75Tb7W5qavI+RBh+0/3796empt53332NjY34+LAs+8gjj+h0ugsXLnAc19LSIhQK+SJhHR0dv5ZSgIMthNCrr76Klzgcjvfff18mk40dO9ZkMnEc19TUFBwcnJaWduLECf7Iz507FyH06KOP8rlKPJzelJeXFxMTo9Pptm/fzpffYDC8/PLLgYGBPj4+cXFxoaGhQqFw1apVfLJkaWlpeHh4dHR0bW2t99a+/fZbgiD44wYAuDVwouGqVasQQjt37uSXFxcX41viCxcumM3m6dOnSySSHTt2cNdN/cbeeecdsVj84osv4oruySefFIlEx44du/6rXnnlldDQ0I8//phfUldXN2TIkJycnGPHjvF15ieffIIQ+vrrr3ExnE5nUVGRd/rsmjVrfH19//SnP/ELV6xYERkZefbsWe+3KygooCjqp59+4ryybwsLC5VK5Ycffoj/3L59e2xsLEVRK1eu9L5a7d27d/jw4ZmZmfn5+XiJxWJZsGBBcHDw9u3bWZYtKSlJTEy85557vN+xpaXlRnK/QF+DMY0DX9VwZIOXMAyzfv366OjoxYsXUxSF03cmTpy4fPnywsLCS5cuIYQcDgcePuDxeJBX6hIeeeF2u8+fP79///79+/ebzebIyMjc3FycsXSDOK9uL4IgHn/8ca1Wi0syZ86cuXPnVlVV7d+/H6/sdDr9/f2XLFmiVCrxC1NSUnJyctra2nA3fGlp6enTp3Nyct58802+TXX27NkPPfTQ5cuXT5w4gRAiCMJqtcbExCxbtozvrpozZ05gYGBZWRl+yZ49e4xG4/Tp0++66y5cPIVC8frrr1ssllOnTtntdtQni0soFBIE0dTUZLPZ+CWhoaF9u73xndyoUaMmTJiwZ8+ekpIShBBFUTU1NSdOnLjjjjuioqLw9qVSqV6v5zMMEEJ+fn6+vr7XPIZGo3HTpk3R0dErV67EH65EIrn//vvnzJlTWlp6/PhxhNCRI0c6OzsXLlw4fvx4/EKVSoVDrr57xHEcQRD4Bqu5ufnBBx+cMWMGX36xWCyTyaKjo6dNmzZ//vx58+YlJiZeuHDh3Llz/K0tzjnD96D4xMCHBSGEv04AgFsMn56rV69+8sknV6xY8fDDD8+ePbusrOzZZ59NT0/HGUU4+RX9Vq4qwzDffPNNUlLS3LlzcdPyvffeKxQK16xZc/3X4uiEpml+tf379/f09Lz55psTJ07k68zHH388PT193759BoMBISQWi1NTU51OZ35+/t69ew8fPkySpK+vb11dXXNzM18kjuP46oXPScXL8e/eFx3vhW63OzEx8cEHH8S9mXj5pk2b9Hr9mjVrRo0ahZcoFIoPPvjA6XRu377d6XSKxWKBQNDR0YE7PbHg4OC+FTW4EYOr2w7rlcqNO8vKy8vHjh07ZMgQjuPwRVEoFI4YMYIgCL1ej191zVbHzs7ODz744ODBg+3t7TjAwg2harXa6XT+H4rHcRzOuEJXL89CoTA7O/v48eNXrlzB69A0rdVqw8LCkFfjs7+/f0VFBQ5oSkpKjEZjQ0PDuHHj8Ap82rvNZquvr+ffLiQkRCgU8v3fBEFoNBq3243/W1FRIZVKR4wY4X24wsLCAgMD29raWltbY2JielUNixYtampq+vvf//7zzz9HRkZmZGT88Y9/xLtzTT4+PmPGjNm0adOePXvGjx8vl8tzc3Nra2vxOBSEUEBAwIsvvvjSSy+dO3cuNjZ26NCh48ePHz9+fN+JlPCetre3m0ympKQkHx8fjuNwXSaTyUaPHv3TTz81NjYihIqLi/38/OLj4zmvxuQhQ4bgzIa+35C2trb58+eXl5e/8847jz76KN//yLLs008/vXHjxi+++OKee+7B73X27NmpU6c+8cQTW7duDQ0NJUlSKpWyLIuPKr9x/Gev3HwAwK2Bz8Sqqiq9Xk9RlFQqvfPOO+fOnTt58mSEkFQqxactHklz/S6nY8eO1dXVrVixIjMzEy8ZOXJkRkZGXl7elStX8E3gDZanuLiYYZinn36aTwDn0znEYnF3d7dWq3U6nV9++eVXX33V2dnpdrtxc4Db7ZZIJD09PUOGDPnNAqOrNRv/1pxXrifLslFRUXi+K3xdMJlMer2+q6tr6dKlEokEv5YgCI/HYzAYGhoaXC5XZGTksmXLHn/88TFjxkRHRycmJk6fPn3UqFG9MkfBDRqMwZP3t4T/HV8ye0VI+E8+ZveOEvjf//GPf/ztb3+bNm3aqlWrUlJS5HK50+lctGiR1Wr9V8ZP9frq45Yh/iYAf3fxpZr/HuO3wwXDMZxKpQoLC6MoCi8kCCImJkar1fJnOEEQuP2jV74z/zved5Ike8UTeJt976g4jktKSlq7du3Zs2f3799/5syZb7755pNPPlm+fPkzzzzjPcTDW3Z2dnp6+pYtW5555pmwsLAff/wxOTl56NCh+E0FAsEzzzwzZcqUPXv2nDx5cvPmzV9//fXEiROff/75ESNGcH260vFH2evg4yV8mfmP2/to990UHzk98MADxcXFa9eu5SMkrKen56uvvpo2bdqsWbNwWgBFUVlZWYsWLfr4449ra2tDQ0NFIlFISEh9fX17e3t0dDSOU91uN+4OxrdlONPrmgcHAPB7wFXBSy+9NH/+fNzGw+cn4RNzyJAhLMuWlpbecccdUqm0V/3AXR0uQxDExo0bGYbZvn17YWEh/i9JkhUVFR0dHbt27XryySf71i2/xuPxiEQiPG8cv5AkSTwtp6+vr8PhWLt27WuvvZaZmfnJJ58EBQWp1erKysrnn38eZ2h47x2vbxXnPeza+44R75RAIPC+r8O9LiKRCL8dnlYUIURRVHJyclJSEm52Wrx48ZgxY3bt2pWXl7dv376NGzfGx8e/8cYbkyZNuvEjALDBGDzxoQD/jaEoKjIysqWlpa2tLSQkhG+OqqqqYlmW/xLz0RX+tgkEAqPReOrUqaysrNdee23kyJF4tY6Ojq6urr7tIjcIh/O1tbVBQUG4hB6Pp6ysTCqV8gNZr5nUzEdICKGIiAiFQhEcHPzdd9/9Wsai90a8v9neWw4PD3e73WVlZd5X9+7ubr1er9Vq8WCTvqeEQqGYNGnSpEmTEEINDQ3z58//5JNPpk+fzh+iXkJDQ0eNGvXLL7/k5uamp6cfO3Zs1apVONsaI0kSZ2IihFpaWj777LOPPvooKCiIjwK998LPz08ul+v1etySjEtut9txWlhAQABCKCYmxmg0NjU18aMFSZLs7u52OBy9Btw1NTUtXrz4l19+Wb16NZ6ewPtYWSwWvH3c/I4ntmBZFh9zHOyqVKqsrKzz58+Xlpbm5OTg0XZ6vb6oqEihUMTGxl7zmAAAflf4NMfD6fmF3kPqxo4de+zYsa1bt06fPj0jI8N7NhZ8IXC5XGKxuKGhIT8/PyQkJC4uDnfA4RWGDRt2+vTp48ePL168+NfuG/uKiIgQiUQrVqyYNm3aNVdob2/ft2+fUqn89NNP+TFJbW1tHR0dcrncOwbiAybkdb/NcRyfUIEXGgwGh8PBV+98/eb9U6PR+Pj4+Pj4rFq16pq3rBhJksnJycnJyS+88ILRaFy1atUPP/ywdu3azMxMlUoF8VO/DMacJ5lMhrOS+SiKoqjJkydfvnw5Ly8PN1EQBFFXV7dt27bAwEA81EIoFIrFYrfb7fF4CILgx1mgq1E5v/29e/dWVlbiDiC8pG+b1nXguG3nzp3oapyHB/Thide8V+u1Qe8/k5OTQ0NDL168ePLkyV7bt1gsLpfr1zbSazs5OTkIoby8vJqaGr45Z+vWrRzHJSYm4tF23ntHEER3dzfuOsTCw8PT0tIcDsd1MsAIgpg8eXJ0dPRPP/106NAhiqKys7P5IMbtduOefiwkJGTChAlCoRAv7NVSiBDy8fEZOXJkfX39wYMH+fa5S5cuHTlyJCQkJD09HSE0cuRIlmVzc3P1er33fvU6Akaj8d133z1+/PhLL7305z//2bs2wXx8fLRabWVlZVVVFf/N0ev1eXl5vr6+uFXJ19d34sSJCKEjR47guzeCIAoLC3/55Zf4+HicQACTPAFwy/AnMr7V4Vv00dUzEa8wefLkyZMnl5eXr1mzprW1FZ/dGB6OffToUYTQ4cOH6+rqli5dunfv3oNXHThwYMeOHVOnTj19+nRFRQX6lcwn78oTrzBu3Dir1YrzQLzX9Hg8FosFXU2a9C42TdO7du3qNW5XJpO53W7cBcFXcXK5XCwWX7hwAV/+SJK0WCyHDx9GXtVar1oOvx1BEKNHj5ZIJJs3b+7o6PCuAx0OB+7Z7FXJq9XqrKwsnU7X2dnpcDj6/SHd9gZjy1NaWtqOHTvWrFmTmJgoEAgiIyMjIyMfeuihvXv3vvfeezabLSQkxGaz7d69+9KlSy+88EJcXBxOKI6MjDx48OD27dslEglJkqGhoXFxcWlpaatXr/7000/r6+t9fX2Li4sPHjwYEBDAz7WIvGYDQjfQFY3XOX/+/JtvvpmVldXT07N+/Xq9Xv/AAw/wwRP+3ntvEJ8e/EJ/f/8HH3ywqalp5cqVCxcuTExMFIlEJpPp0qVLMpnsnnvuwRM08C/xLqr3dkaPHj1//vzNmzevWrVqwYIFvr6+Fy5c+PLLLydPnux9Y+Tdr7dmzZqmpqZhw4aFhIQIBILGxsZDhw7FxcXx2d/XPAIZGRlZWVlbt26tra3NysryDhObm5txG3V4eLhEImltbd2xY4dCocjIyLjmpqRS6WOPPZafn//qq6+aTKbAwMCampqNGzcajcannnoKt/QMGzZswYIFO3fufP7556dOnarVaouKinbu3Ikb5/F2zGbzhx9+uG7duuzs7ISEBDxwBte2gYGBQ4cORQip1erFixd/+OGH77zzzowZM0JDQx0Ox969e8+cObNixYr4+HiEkFAozMnJeeCBBzZt2vTqq6+OHTu2paXliy++QAgtXLgwJSXlBr8VAICbCFfL17lvCQgIWLJkCX52Z1tb2+zZs3G/RHNz89mzZy9evDh79uwZM2YcOXKE4zg+VZwnk8kWLFjw888/FxYW/lplxd9x8UuysrIeeeSRrVu3trS0jBs3LjIykiRJg8GQm5uLJ3PC7fqnT59+66238MR+BQUFBw4cCA4O5jM0EEKpqant7e2bN2+22+1CoVCj0QwdOhQ/VWbTpk1DhgxJSUnp7u6+cOFCQUGBVCrlQzH+EtArirrnnnuampp++OGH1tbWO++808/Pj2XZhoaGurq6MWPGzJ49u7Ky8uuvvw4PD4+Pj8fpWRs3buzp6cnKysJzu0At1y+DMXhauHDhyZMn33nnHdxwsmzZsuXLlw8fPvztt9/+4IMPXnnlFRyzi0SiRx999KGHHiJJEsfp+DZi3759ubm5AoFgwYIFr7322sKFC+vr648dO3b06FGtVkuS5MKFC51OZ1tbG/89drvdNE17D6m4Dtw4MXfu3A0bNmzatKmzs1MikTz44IPz58/n+90tFgvfvc13vdtsNrPZzGcp3XHHHR6PZ926dR9//LFIJJLJZLiD6a677sKd2RzHmc1m3ITLxzQcx1ksFr5dTaPRLF++XKVSbd269cknn1QoFD09PZmZmc8++2xsbCwfTJjNZv7ewuVy5ebm7t27VywW4zubiIiI5cuXR0REoF8/f2Qy2YQJE9avX19dXX3XXXf5+/vz7ecURVVXVx87dkwqlVIU5XQ6ZTLZ0qVL8cwCfREEkZOT89prr3344YfPPPOMSqWyWCxBQUFLly596KGH8LESiUQrV640Go2HDh3at2+fTqdTKpVz586trKzE8xQghDo7O9evX2+326uqql5++WU8Zy7+NGfN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2p599tm5c+fu3r37l7/85dNPP33uueee3h3x35sJe+/777//hz/8YU5W+0IIcdddd915550zZ86cPXv2+vXrBwcHW1tbDx8+bLcK/JkVf+4W69evv/3224eGht62jW+99dbbbrvN5/Ol0+lbbrkFAL7yla/YLLzxne/cmsslykwQNWb3g+U3/+xnP/vEE0/8/Oc/LygoGPfCCj6VxPb8888/99xzd999986dOwcHB22O0bRp03LtKsfXLFZKZbPZL37xi5///OcB4Atf+MIjjzwyEYwnONXp2TIXwx+Pd09kWJXMiMbzHMcxnCFgZmQ2UghGHKV10swALNAY4wghlRzl4WQGBgkAiLasWaJA234FIZPJSClRSGRcXE6Lp9e6Pn8kErYBuzP/Zfv6+j7wgQ+0trbmPNA2/LpkyZKKioqHH3743nvv7enp2bVrVyqVevPNNxctWnRmqmGsJKlU6s4771y9evXbTt2ampp77733nHPOUUo988wzt91229e//vVLL70UACz76MKF582ZO+eRXzz6/A9+sLCqMuz3I8DC+rq3Bge3JBJeMt0B0KU0I/Z5Os8RxYw+yQ7zgIbmhU2u6+OO8Jf+/ktz5s21rkT7uA4AxcXFS66+5uHv/Ic5ZgD4rWR65nnn953s2vDMjhmXTTFJVMolk3Ih+Lcf+tzKJ1ceb++w57DOZl1/ft3kawra1w3Hjg/HBo5t6juxrz+dlbGBEp2tPr5/qKq5zB8QI4Px3kND733ffAYe6OuVSrmuv6mx8fzzumuqOi6+eNHyFSt+v77bHg5/TO/kFIHruq+++uonPvGJ2bNn33777e/grDozyAkci8W+/vWvT548GQA2bNgAAPv27Zs9e3ZRUdG4e54sbJL4U089VVtb293d3dzcvHbt2nE2nuyNP/jBD1522WWWzTk3WEopv9/f3Nzc1tb2yU9+0vO8tra2lpaWvLy8b33rWzmz4HTJ/fvICbNw4cJHH300kUiMHSZmrqqqklLGYrFbbrmlr69vzZo1lZWVZzI54Pdhh6W6uvr48eNKqUgkopSKx+M2tW0ihMaklN3d3f/yL//yxhtvPPDAAzfccMP4jpgFn+q4F4/H6+vrv/3tb0spT5w40draevfdd99zzz3WwhvfgyY3gxUVFfZibW3tuNudY2HHZ2JytPzfQwjBQgAIRymNMsvGcVxmNsYAsfC5BMb6vZGZbE8FYgY+1XQPiY3RGlCQICEEAmoyylqXbqAx4N04szwQCEQjYZ/PN14KrLi4+Cc/+UnumdAep8FgsLCw8OWXX25qavre976XzWaHhoa6urruvPPOn/zkJwsWLDgDKcb24PX7/bfffvsHPvCBsee8vd7Y2CiEWLVq1c033/ztb3/7tttuG6sOtNY+1502tfk5v384nc4PBBAxmUw1nzPt4muu2b9jx9GDB7u7ewYH+vJ9Jp1K1frcpoAPwr4abXrePF59/tRJzXWFRUWj9ZpC5J4//X7/e26+CZXY8LvXyNAHl1x22ZIl69evf/K5J9a1HApG/JTB4P/b3p2HR1ne/QK/l2f2JTPZJguQhSUEDCBgQMSyuACK4gKKSmmtxSqX9e05bRU9fevW63jVVm3fqNXquawtfU9fW9seRbEsahXcKqBStoYXkD2QkIWETGae+/6dP27ydAxgGcTMBL+fP3JNhiFzz/L8nt9zL7/b7S8vK58ydcri3y42S1A55xdeOOn1Vb/csbWzs7WxrW1315HWnPxRHh7c11CvoueyZMe619bt+8dfcvKsiD//yotvqD1n7MM/fXTl6+8H/D5/QB8RTfmVOd4iz7N/frqltXXO7Dm8e9t3ljL74tjLFZ6yCMblcr344ov33HPPuHHjHnvssVAolA296eZVtLS0FBQUfPDBBzfddJPpq6urq+vXr9/s2bMzHt+c9zASicRiMcZYQUFBXl5eZ2cnO93zc06lDzASiZxoU73FixebIae2trZbbrll7NixDz74YO907ThP4ff7hw4detzH7N69e8GCBVu3bn311VcDgUBzc7Pp385I55OTdw4ePDgej8fj8Y0bN65bty4Wi11xxRW9MNDmuly6AAAgAElEQVT52UzYra+vv/XWW/fv3//QQw9NmjSpubnZFAbMYMNY9xHicrmuvfbaiy66yLbtUCg0ZcqUcDj84IMPRiIR5zjPYAs55yUlJbW1tS+88MKAAQOCweALL7wwePDgTDXpjMS7MWb2uiCuiPjRATgtyew5I80iQM61JsZIM9MVxTnnjJMpRy4EE0Jw4knbJtI+r4e4CPDktdXBWKwwFAr5fL4MTnXinJeXlx/3n6655pqpU6eaA3bJkiUPP/zws88+O3LkyN453Trxs6ioqKio6NgH2Lb9/PPPf+1rX7vj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</encoded_png>
            <encoded_png char_offset="268" justification="left" link=""></encoded_png>
            <codebox char_offset="313" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Perform the necessary imports
import matplotlib.pyplot as plt
from scipy.stats import pearsonr

# Assign the 0th column of grains: width
width = grains[:,0]

# Assign the 1st column of grains: length
length = grains[:,1]

# Scatter plot width vs length
plt.scatter(width, length)
plt.axis('equal')
plt.show()

# Calculate the Pearson correlation
correlation, pvalue = pearsonr(width,length)

# Display the correlation
print(correlation)
</codebox>
            <codebox char_offset="367" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import PCA
from sklearn.decomposition import PCA

# Create PCA instance: model
model = PCA()

# Apply the fit_transform method of model to grains: pca_features
pca_features = model.fit_transform(grains)

# Assign 0th column of pca_features: xs
xs = pca_features[:,0]

# Assign 1st column of pca_features: ys
ys = pca_features[:,1]

# Scatter plot xs vs ys
plt.scatter(xs, ys)
plt.axis('equal')
plt.show()

# Calculate the Pearson correlation of xs and ys
correlation, pvalue = pearsonr(xs, ys)

# Display the correlation
print(correlation)</codebox>
          </node>
          <node name="Intrinsic dimension" unique_id="54" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1612151822" ts_lastsave="1612309334">
            <rich_text scale="h1">Dimensions = Features that a data set has</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">	But they can be approximate using or reducing it's feture or dimensions</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">	That means we can compress data</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">		This helps us not only in cleaning data but in making our model simpler</rich_text>
            <rich_text>
		
</rich_text>
            <rich_text scale="h1">Excercises</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h1">	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/unsupervised-learning-in-python/decorrelating-your-data-and-dimension-reduction?ex=6" scale="h1">The first principal component</rich_text>
            <rich_text>
		</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h1">	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/unsupervised-learning-in-python/decorrelating-your-data-and-dimension-reduction?ex=6" scale="h1">Variance of the PCA features</rich_text>
            <rich_text>
		</rich_text>
            <rich_text justification="left"></rich_text>
            <codebox char_offset="269" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Make a scatter plot of the untransformed points
plt.scatter(grains[:,0], grains[:,1])

# Create a PCA instance: model
model = PCA()

# Fit model to points
model.fit(grains)

# Get the mean of the grain samples: mean
mean = model.mean_

# Get the first principal component: first_pc
first_pc = model.components_[0,:]

# Plot first_pc as an arrow, starting at mean
plt.arrow(mean[0], mean[1], first_pc[0], first_pc[1], color='red', width=0.01)

# Keep axes on same scale
plt.axis('equal')
plt.show()</codebox>
            <codebox char_offset="303" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Perform the necessary imports
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import make_pipeline
import matplotlib.pyplot as plt

# Create scaler: scaler
scaler = StandardScaler()

# Create a PCA instance: pca
pca = PCA()

# Create pipeline: pipeline
pipeline = make_pipeline(scaler, pca)

# Fit the pipeline to 'samples'
pipeline.fit(samples)

# Plot the explained variances
features = range(pca.n_components_)
plt.bar(features, pca.explained_variance_)
plt.xlabel('PCA feature')
plt.ylabel('variance')
plt.xticks(features)
plt.show()
</codebox>
          </node>
          <node name="Dimension reduction with PCA" unique_id="55" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1612151836" ts_lastsave="1612315494">
            <rich_text scale="h1">It is representation of data using less features</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">	You make dimension reduction with PCA</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">	You need to specify how many PCA features you want to keep</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">		It discards the low variance features and assumes the ones that have high variance</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">	We can encounter sparse arrays so we can have 0 values in columns</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h1">Excercises</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h1">	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/unsupervised-learning-in-python/decorrelating-your-data-and-dimension-reduction?ex=10" scale="h1">Dimension reduction of the fish measurements</rich_text>
            <rich_text>
		</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h1">	
	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/unsupervised-learning-in-python/decorrelating-your-data-and-dimension-reduction?ex=11" scale="h1">A tf-idf word-frequency array</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h3">		</rich_text>
            <rich_text justification="left" scale="h3"></rich_text>
            <rich_text scale="h3"> 
		create a tf-idf word frequency array for a toy collection of documents.  For this, use the </rich_text>
            <rich_text family="monospace" scale="h3">TfidfVectorizer</rich_text>
            <rich_text scale="h3"> from sklearn.  It transforms a list of documents into a word frequency array, which it outputs as a csr_matrix.  It has </rich_text>
            <rich_text family="monospace" scale="h3">fit()</rich_text>
            <rich_text scale="h3"> and </rich_text>
            <rich_text family="monospace" scale="h3">transform()</rich_text>
            <rich_text scale="h3"> methods like other 		sklearn objects.</rich_text>
            <rich_text>
		
</rich_text>
            <rich_text scale="h1">	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/unsupervised-learning-in-python/decorrelating-your-data-and-dimension-reduction?ex=12" scale="h1">Clustering Wikipedia part I</rich_text>
            <rich_text>
		</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>
		
</rich_text>
            <rich_text scale="h1">	Clustering Wikipedia part II</rich_text>
            <rich_text>
		</rich_text>
            <rich_text justification="left"></rich_text>
            <codebox char_offset="359" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import PCA
from sklearn.decomposition import PCA

# Create a PCA model with 2 components: pca
pca = PCA(n_components = 2)

# Fit the PCA instance to the scaled samples
pca.fit(scaled_samples)

# Transform the scaled samples: pca_features
pca_features = pca.transform(scaled_samples)

# Print the shape of pca_features
print(pca_features.shape)
</codebox>
            <codebox char_offset="396" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import TfidfVectorizer
from sklearn.feature_extraction.text import TfidfVectorizer

# Create a TfidfVectorizer: tfidf
tfidf = TfidfVectorizer()

# Apply fit_transform to document: csr_mat
csr_mat = tfidf.fit_transform(documents)

# Print result of toarray() method
print(csr_mat.toarray())

# Get the words: words
words = tfidf.get_feature_names()

# Print words
print(words)
</codebox>
            <codebox char_offset="722" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Perform the necessary imports
from sklearn.decomposition import TruncatedSVD
from sklearn.cluster import KMeans
from sklearn.pipeline import make_pipeline

# Create a TruncatedSVD instance: svd
svd = TruncatedSVD(n_components = 50)

# Create a KMeans instance: kmeans
kmeans = KMeans(n_clusters = 6)

# Create a pipeline: pipeline
pipeline = make_pipeline(svd, kmeans)
</codebox>
            <codebox char_offset="759" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import pandas
import pandas as pd

# Fit the pipeline to articles
pipeline.fit(articles)

# Calculate the cluster labels: labels
labels = pipeline.predict(articles)

# Create a DataFrame aligning labels and titles: df
df = pd.DataFrame({'label': labels, 'article': titles})

# Display df sorted by cluster label
print(df.sort_values('label'))
</codebox>
          </node>
        </node>
        <node name="Discovering interpretable features" unique_id="56" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1612315521" ts_lastsave="1612316358">
          <rich_text scale="h1">Interpretable features are the ones we can comprehend easily</rich_text>
          <rich_text>

</rich_text>
          <rich_text scale="h2">	</rich_text>
          <rich_text link="node 57" scale="h2">Non-negative matrix factorization NMF</rich_text>
          <rich_text>
</rich_text>
          <rich_text scale="h2">	</rich_text>
          <rich_text link="node 58" scale="h2">NMF learns interpretable parts</rich_text>
          <rich_text>
</rich_text>
          <rich_text scale="h2">	</rich_text>
          <rich_text link="node 59" scale="h2">Building recommender systems using NMF</rich_text>
          <node name="Building recommender systems using NMF" unique_id="59" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1612315617" ts_lastsave="1612498442">
            <rich_text scale="h1">We can use NMF to make a recommender system for newspapers, video, etc.</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">	Using nmf of a word-frequency array
	NMF feature values describe the topics</rich_text>
            <rich_text>
	</rich_text>
            <rich_text scale="h2">We use cosine similarity to compare articles that have more similarity or in some ambigous way have kind of the same topics</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h1">Excercises </rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h1">	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/unsupervised-learning-in-python/discovering-interpretable-features?ex=12" scale="h1">Which articles are similar to Cristiano Ronaldo</rich_text>
            <rich_text>
		</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text scale="h1">	
	
	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/unsupervised-learning-in-python/discovering-interpretable-features?ex=14" scale="h1">Recommend musical artists part 1 </rich_text>
            <rich_text>
		</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h1">	
	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/unsupervised-learning-in-python/discovering-interpretable-features?ex=14" scale="h1">Recommend musical artists part 2</rich_text>
            <rich_text>
		</rich_text>
            <rich_text justification="left"></rich_text>
            <codebox char_offset="339" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Perform the necessary imports
import pandas as pd
from sklearn.preprocessing import normalize

# Normalize the NMF features: norm_features
norm_features = normalize(nmf_features)

# Create a DataFrame: df
df = pd.DataFrame(norm_features, index = titles)

# Select the row corresponding to 'Cristiano Ronaldo': article
article = df.loc['Cristiano Ronaldo']

# Compute the dot products: similarities
similarities = df.dot(article)

# Display those with the largest cosine similarity
print(similarities.nlargest())</codebox>
            <codebox char_offset="381" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Perform the necessary imports
from sklearn.decomposition import NMF
from sklearn.preprocessing import Normalizer, MaxAbsScaler
from sklearn.pipeline import make_pipeline

# Create a MaxAbsScaler: scaler
scaler = MaxAbsScaler()

# Create an NMF model: nmf
nmf = NMF(n_components = 20)

# Create a Normalizer: normalizer
normalizer = Normalizer()

# Create a pipeline: pipeline
pipeline = make_pipeline(scaler, nmf, normalizer)

# Apply fit_transform to artists: norm_features
norm_features = pipeline.fit_transform(artists)</codebox>
            <codebox char_offset="421" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import pandas
import pandas as pd

# Create a DataFrame: df
df = pd.DataFrame(norm_features, index = artist_names)

# Select row of 'Bruce Springsteen': artist
artist = df.loc['Bruce Springsteen']

# Compute cosine similarities: similarities
similarities = df.dot(artist)

# Display those with highest cosine similarity
print(similarities.nlargest())
</codebox>
          </node>
          <node name="Non-negative matrix factorization NMF" unique_id="57" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1612315602" ts_lastsave="1612317111">
            <rich_text scale="h1">Is a dimension reduction technique</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">	it makes interpretable models</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">	They cannot be applied to every data set</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">	like it names says it can only be applied to non negative data sets</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">		So it is used to express documents as combinations of topics</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">		Images as combination of patterns</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">		Number of components most be specified</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">	NMF has components that are equal to the dimension of the samples available</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">	NMF features are non negative</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">		They can be restructured to recreate the samples</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h1">Excercises</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h1">	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/unsupervised-learning-in-python/discovering-interpretable-features?ex=3" scale="h1">NMF applied to wikipedia articles</rich_text>
            <rich_text>
		</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h1">	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/unsupervised-learning-in-python/discovering-interpretable-features?ex=4" scale="h1">NMF features of the Wikipedia articles</rich_text>
            <rich_text>
		</rich_text>
            <rich_text justification="left"></rich_text>
            <codebox char_offset="525" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import NMF
from sklearn.decomposition import NMF

# Create an NMF instance: model
model = NMF(n_components = 6)

# Fit the model to articles
model.fit(articles)

# Transform the articles: nmf_features
nmf_features = model.transform(articles)

# Print the NMF features
print(nmf_features.round(2))
</codebox>
            <codebox char_offset="569" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import pandas
import pandas as pd

# Create a pandas DataFrame: df
df = pd.DataFrame(nmf_features, index = titles)

# Print the row for 'Anne Hathaway'
print(df.loc['Anne Hathaway'])

# Print the row for 'Denzel Washington'
print(df.loc['Denzel Washington'])
</codebox>
          </node>
          <node name="NMF learns interpretable parts" unique_id="58" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1612315610" ts_lastsave="1612497063">
            <rich_text scale="h1">For documents</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">	NMF components represent topics</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">	NMF features combine topics into documents</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h1">For images</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">	NMF components are parts of an image</rich_text>
            <rich_text>

</rich_text>
            <rich_text scale="h1">Excercises</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h1">	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/unsupervised-learning-in-python/discovering-interpretable-features?ex=7" scale="h1">NMF learns topics of documents</rich_text>
            <rich_text scale="h1"> </rich_text>
            <rich_text>
		</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>
	
</rich_text>
            <rich_text scale="h1">	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/unsupervised-learning-in-python/discovering-interpretable-features?ex=8" scale="h1">Explore the LED digits dataset</rich_text>
            <rich_text>
		</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>	
	
</rich_text>
            <rich_text scale="h1">	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/unsupervised-learning-in-python/discovering-interpretable-features?ex=9" scale="h1">NMF learns the parts of images</rich_text>
            <rich_text scale="h1">
		</rich_text>
            <rich_text justification="left"></rich_text>
            <rich_text>
	
</rich_text>
            <rich_text scale="h1">	</rich_text>
            <rich_text link="webs https://campus.datacamp.com/courses/unsupervised-learning-in-python/discovering-interpretable-features?ex=10" scale="h1">PCA doesn't learn parts </rich_text>
            <rich_text>
		</rich_text>
            <rich_text justification="left"></rich_text>
            <codebox char_offset="187" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import pandas
import pandas as pd

# Create a DataFrame: components_df
components_df = pd.DataFrame(model.components_, columns = words)

# Print the shape of the DataFrame
print(components_df.shape)

# Select row 3: component
component = components_df.iloc[3]

# Print result of nlargest
print(component.nlargest())
</codebox>
            <codebox char_offset="225" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import pyplot
from matplotlib import pyplot as plt

# Select the 0th row: digit
digit = samples[0,:]

# Print digit
print(digit)

# Reshape digit to a 13x8 array: bitmap
bitmap = digit.reshape(13, 8)

# Print bitmap
print(bitmap)

# Use plt.imshow to display bitmap
plt.imshow(bitmap, cmap='gray', interpolation='nearest')
plt.colorbar()
plt.show()</codebox>
            <codebox char_offset="264" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import NMF
from sklearn.decomposition import NMF

# Create an NMF model: model
model = NMF(n_components = 7)

# Apply fit_transform to samples: features
features = model.fit_transform(samples)

# Call show_as_image on each component
for component in model.components_:
    show_as_image(component)

# Assign the 0th row of features: digit_features
digit_features = features[0,:]

# Print digit_features
print(digit_features)</codebox>
            <codebox char_offset="296" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="python" highlight_brackets="1" show_line_numbers="1"># Import PCA
from sklearn.decomposition import PCA

# Create a PCA instance: model
model = PCA(n_components = 7)

# Apply fit_transform to samples: features
features = model.fit_transform(samples)

# Call show_as_image on each component
for component in model.components_:
    show_as_image(component)</codebox>
          </node>
        </node>
      </node>
      <node name="Linear Classifiers in Python" unique_id="60" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1613060579" ts_lastsave="1613061927">
        <node name="Applying logistic regression and SVM" unique_id="61" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1613061921" ts_lastsave="1613061984">
          <node name="scikit-lear refresher" unique_id="65" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1613061984" ts_lastsave="1613062040"/>
          <node name="Applying logistic regression adn SVM" unique_id="66" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1613062040" ts_lastsave="1613062054"/>
          <node name="Linear classifiers" unique_id="67" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1613062054" ts_lastsave="1613062054"/>
        </node>
        <node name="Loss functions" unique_id="62" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1613061927" ts_lastsave="1613062080">
          <node name="Linear classifiers: the coefficients" unique_id="68" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1613062080" ts_lastsave="1613062120"/>
          <node name="What is a loss function" unique_id="71" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1613062120" ts_lastsave="1613062134"/>
          <node name="Loss function diagrams" unique_id="72" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1613062134" ts_lastsave="1613062134"/>
        </node>
        <node name="Logistic regression" unique_id="63" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1613061933" ts_lastsave="1613062222">
          <node name="Logistic regression and regularization" unique_id="73" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1613062195" ts_lastsave="1613062208"/>
          <node name="Logistic regression and probabilities" unique_id="74" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1613062208" ts_lastsave="1613062208"/>
          <node name="Multi-class logistic regression" unique_id="75" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1613062222" ts_lastsave="1613062222"/>
        </node>
        <node name="Support Vector Machines" unique_id="64" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1613061943" ts_lastsave="1613062237">
          <node name="Support vectors" unique_id="76" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1613062237" ts_lastsave="1613062245"/>
          <node name="Kernel SVMs" unique_id="77" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1613062245" ts_lastsave="1613062255"/>
          <node name="Comparing ligistic regression and SVM" unique_id="78" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1613062255" ts_lastsave="1613062255"/>
        </node>
      </node>
    </node>
    <node name="WebDevelopment" unique_id="8" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1603816286" ts_lastsave="1611292987">
      <node name="Flask" unique_id="31" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1611292987" ts_lastsave="1612244503">
        <rich_text scale="h1">This are my notes for flask basics </rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h1">	We use</rich_text>
        <rich_text scale="h2">
		 </rich_text>
        <rich_text justification="left" scale="h2"></rich_text>
        <rich_text scale="h2"> to run the server </rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h1">	</rich_text>
        <rich_text link="node 44" scale="h1">Web service</rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h2">		Is an Api</rich_text>
        <rich_text scale="h3">
</rich_text>
        <rich_text scale="h2">		Returns something a json, xml, html</rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h1">	Web application </rich_text>
        <rich_text scale="h2">
		it's a full fledged web page</rich_text>
        <codebox char_offset="47" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="1">flask run</codebox>
        <node name="Web services" unique_id="44" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1611714112" ts_lastsave="1611949108">
          <rich_text scale="h1">All communications between everything in the internet is sent by text
</rich_text>
          <rich_text scale="h2">   ◇ So we use json, XML, HTML, etc. to send data even images or videos </rich_text>
          <rich_text scale="h1">
</rich_text>
          <rich_text scale="h2">      ▪ This happens because we use TCP protocol </rich_text>
          <rich_text>
</rich_text>
          <rich_text scale="h2">      ▪ But the most used format is JSON</rich_text>
          <rich_text>
</rich_text>
          <rich_text scale="h2">         - Jsons are like dictionaries in python</rich_text>
          <rich_text>
  
</rich_text>
          <rich_text scale="h1">Requests get and post</rich_text>
          <rich_text>
</rich_text>
          <rich_text scale="h1">• A request is a call to the server</rich_text>
          <rich_text>
</rich_text>
          <rich_text scale="h2">   ◇ A call is a message that we send to a server as a client and we get a response to this message or petition for an specific resource</rich_text>
          <rich_text>
</rich_text>
          <rich_text scale="h2">      ▪ The petition is asking to gives us a resource that can be a page, text, data, etc</rich_text>
          <rich_text>
</rich_text>
          <rich_text scale="h2">• The server accepts the request if its valid or it was configured on the server programming</rich_text>
          <rich_text>
</rich_text>
          <rich_text scale="h2">   ◇ So a server doesn't just receive everything its sent at</rich_text>
          <rich_text>
</rich_text>
          <rich_text scale="h2">   ◇ If the server gets a valid request it' sends back a response</rich_text>
          <rich_text>
</rich_text>
          <rich_text scale="h2">      ▪ This response it's the resource and the status code of the request</rich_text>
          <node name="Restful API" unique_id="49" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1611949108" ts_lastsave="1612244478">
            <rich_text scale="h1">Is an architectural style of building APIS
</rich_text>
            <rich_text scale="h2">   ◇ Code that allows us to take a request
      ▪ It process the request and returns a response
         - Like a web service
   ◇  It exists multiple ways to build apis</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">      ▪ Everything is process in the server side of things and the apis are just petitions from the client to the server</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">      ▪ It's a microservice architecture</rich_text>
            <rich_text>


</rich_text>
            <rich_text scale="h1">Resource method chart</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">   ◇ GET</rich_text>
            <rich_text>
      ▪ GET a resource that the server offers
</rich_text>
            <rich_text scale="h2">   ◇ POST</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">      ▪ Send something to the server POSTING something from the client and expect a response from the server</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">   ◇ PUT</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">      ▪ Is used to updated something we POSTED we use POST to create something new in the server</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">      ▪ Like updating information from a user</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">   ◇ DELETE</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">      ▪ Self explained</rich_text>
            <rich_text>
</rich_text>
            <rich_text scale="h2">   ◇ Resources that you're offering</rich_text>
            <rich_text>

</rich_text>
            <rich_text justification="left"></rich_text>
            <table char_offset="798" justification="left" col_min="180" col_max="180" col_widths="0,0,0,0,0">
              <row>
                <cell>GET</cell>
                <cell>/sum</cell>
                <cell>DESCRIPTION</cell>
                <cell>OPTIONAL parameters</cell>
                <cell>what to send on 404</cell>
              </row>
              <row>
                <cell>POST</cell>
                <cell></cell>
                <cell></cell>
                <cell></cell>
                <cell></cell>
              </row>
              <row>
                <cell>PUT</cell>
                <cell></cell>
                <cell></cell>
                <cell></cell>
                <cell></cell>
              </row>
              <row>
                <cell>DELETE</cell>
                <cell></cell>
                <cell></cell>
                <cell></cell>
                <cell></cell>
              </row>
              <row>
                <cell>METHOD</cell>
                <cell>PATH</cell>
                <cell>USED FOR</cell>
                <cell>PARAM</cell>
                <cell>ON ERROR</cell>
              </row>
            </table>
          </node>
        </node>
      </node>
    </node>
    <node name="Algorithms and data structures with python" unique_id="79" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1613442047" ts_lastsave="1613446886">
      <rich_text scale="h1">Introduction	</rich_text>
      <rich_text>
	</rich_text>
      <rich_text scale="h1">Efficiency</rich_text>
      <rich_text>
</rich_text>
      <rich_text scale="h2">		Actually using or taking advantage of everything on your computer</rich_text>
      <rich_text>
</rich_text>
      <rich_text scale="h2">		Efficient code is the thing that you search as a programmer</rich_text>
      <rich_text>
	</rich_text>
      <rich_text scale="h1">Algorithm</rich_text>
      <rich_text>
</rich_text>
      <rich_text scale="h2">		Is a set of steps to do something</rich_text>
      <rich_text>
		
	</rich_text>
      <rich_text scale="h1">Notation</rich_text>
      <rich_text>
</rich_text>
      <rich_text scale="h2">		BIG O notation</rich_text>
      <rich_text>
</rich_text>
      <rich_text scale="h2">			O(Algebraic expression)</rich_text>
      <rich_text>
</rich_text>
      <rich_text scale="h2">				Like O(N) N is the length of the input but also to especify the space efficiency</rich_text>
      <rich_text>
				
	</rich_text>
      <rich_text scale="h1">We use pseudo code to see what are we going to do</rich_text>
      <rich_text>
</rich_text>
      <rich_text scale="h2">		Like a for with n repetitions</rich_text>
      <rich_text>
		
</rich_text>
      <rich_text scale="h1">	Approximation</rich_text>
      <rich_text>
</rich_text>
      <rich_text scale="h2">		We want to minimize the computation time and calculate the time we need to execute the code</rich_text>
      <rich_text>
</rich_text>
      <rich_text scale="h2">		We talk about efficiency using the worst case escenario</rich_text>
      <node name="List-Based Collections" unique_id="80" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1613446886" ts_lastsave="1613450107">
        <rich_text scale="h1">Collections</rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h2">	They don't have any kind of order</rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h2">	They have multiple types of objects in them</rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h2">	Data structures are the ones that decide any of this</rich_text>
        <rich_text>
	
</rich_text>
        <rich_text scale="h1">Lists</rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h2">	They are ordered</rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h2">	The objects in it are related</rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h2">	There is no fixed lenght</rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h1">   ◇ Arrays are the most basic type of lists available in programming languages</rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h2">      ▪ The power of arrays depends on the language you're using them</rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h2">      ▪They have a fixed size but this depends on the language</rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h2">      ▪ Arrays  have indexes to tell the position of the elements inside them</rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h2">      ▪ Insertion is difficult in arrays if you want to insert something between elements also deleting has this problem</rich_text>
        <rich_text>

</rich_text>
        <rich_text scale="h1">   ◇ Linked Lists</rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h2">      ▪ Is an extension of a list</rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h2">      ▪ It has order but it doesn't have indexes</rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h2">      ▪ They are related by its links not by index</rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h2">      ▪ They know what elements is next and behind them</rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h2">      ▪ It solves the problem of deleting and inserting elements</rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h2">         - A linked list stores in a way that it doesn't used indexes with numbers
            → it actually saves a reference to the next or the element behind the element you are standing in</rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h2">            → So it saves references or memory addresses of the elements beside it</rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h2">            → You practically hop from element to the next</rich_text>
        <rich_text>
</rich_text>
        <rich_text scale="h2">            → It takes constant time to insert cause you hop and jump between the pointers</rich_text>
      </node>
    </node>
  </node>
  <node name="Blender" unique_id="32" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1611356228" ts_lastsave="1611377303">
    <rich_text scale="h1">Little shortcuts notes</rich_text>
    <rich_text>
	</rich_text>
    <rich_text scale="h2">N and T are short cut keys ofr the submenus</rich_text>
    <rich_text>
	</rich_text>
    <rich_text scale="h2">We press the shortcut that we want to use for transforming and then we press the letter of the axxis we want it to apply the transform to or use shift and the letter tu exclude that axis</rich_text>
    <rich_text>
</rich_text>
    <rich_text scale="h2">	We apply a transformation with ctrl a and apply it to rotate and scale</rich_text>
  </node>
  <node name="Unity/C#" unique_id="9" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1603816319" ts_lastsave="1611979642"/>
  <node name="Golang" unique_id="2" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1603816221" ts_lastsave="1603816230"/>
  <node name="React" unique_id="3" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1603816230" ts_lastsave="1603816242"/>
  <node name="Android/Kotlin" unique_id="4" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1603816242" ts_lastsave="1603816250"/>
  <node name="Containers" unique_id="5" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1603816250" ts_lastsave="1611898725">
    <node name="Basics" unique_id="11" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1603842516" ts_lastsave="1605043359">
      <rich_text scale="h1">Why use docker?</rich_text>
      <rich_text>
</rich_text>
      <rich_text scale="h3">Cause it makes our lives easier</rich_text>
      <rich_text>
</rich_text>
      <rich_text scale="h1">What is docker?</rich_text>
      <rich_text>
</rich_text>
      <rich_text scale="h3">It is a platform or ecosystem to use containers</rich_text>
      <rich_text>
</rich_text>
      <rich_text scale="h1">What is a container</rich_text>
      <rich_text>?
• </rich_text>
      <rich_text scale="h3">It has an image that it's a single file with alll dependencies and configurations required to run a program</rich_text>
      <rich_text>
• </rich_text>
      <rich_text scale="h3">And a container is an instance of an image and is the image running</rich_text>
      <rich_text>
• </rich_text>
    </node>
    <node name="kubernetes" unique_id="15" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1605040103" ts_lastsave="1605040103"/>
    <node name="kubernetes certification" unique_id="17" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1605040174" ts_lastsave="1605040174"/>
  </node>
  <node name="Android" unique_id="47" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1611898725" ts_lastsave="1611898731">
    <node name="Layout" unique_id="48" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1611898731" ts_lastsave="1611899849">
      <rich_text scale="h1">The strings need to be on a separate file that we can access so that they can be compatible with a bunch of other languages besides kotlin</rich_text>
      <rich_text>
</rich_text>
      <rich_text scale="h2">	We can have multiple views with different views like react components and it maps them so that we can have an easier life while programming or creating a layout</rich_text>
      <rich_text>
</rich_text>
      <rich_text scale="h2">	To add functianility we add an event listener like java</rich_text>
    </node>
  </node>
  <node name="Aws" unique_id="6" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1603816253" ts_lastsave="1603845879">
    <node name="Cloud Practicioner Training 2020" unique_id="12" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1603845879" ts_lastsave="1603845879"/>
  </node>
</cherrytree>
