<?xml version="1.0" encoding="UTF-8"?>
<cherrytree>
  <bookmarks list=""/>
  <node name="linux" unique_id="3" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1603808256" ts_lastsave="1603810489">
    <rich_text>• </rich_text>
    <rich_text scale="h1">A little study guide for linux and open source software</rich_text>
    <rich_text>
</rich_text>
    <rich_text indent="1" scale="h2">• </rich_text>
    <rich_text scale="h2">Memory
</rich_text>
    <rich_text indent="1" scale="h2">• </rich_text>
    <rich_text scale="h2">Networking
</rich_text>
    <rich_text indent="1" scale="h2">• </rich_text>
    <rich_text scale="h2">Commands in general</rich_text>
    <rich_text>
</rich_text>
    <node name="Memory" unique_id="4" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1603809042" ts_lastsave="1603810857">
      <rich_text scale="h1">• When the linux is under extreme memory pressure it invokes the OOM (out of memory) killer</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1" scale="h2">• The command to watch kernel messages as they apear</rich_text>
      <rich_text>
</rich_text>
      <rich_text justification="left"></rich_text>
      <rich_text>
</rich_text>
      <rich_text scale="h2">• The command to watch kernel messages as they apear</rich_text>
      <codebox char_offset="145" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="1">sudo tail -f /var/log/messages</codebox>
    </node>
    <node name="Networking" unique_id="5" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1603810489" ts_lastsave="1603813591">
      <rich_text scale="h1">• The majority of network programming in Linux is done using the socket interface</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1" scale="h2">• However there are new kinds of address and protocol families</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2" scale="h3">• </rich_text>
      <rich_text scale="h3" weight="heavy">netlink</rich_text>
      <rich_text scale="h3"> interface, which permits opening up socket connections between kernel sub-systems and applications (or other kernel sub-systems). This has been effectively deployed to implement firewall and routing applications.</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1" justification="center" scale="h2"> </rich_text>
      <rich_text justification="center" scale="h2">
</rich_text>
      <rich_text indent="1" justification="fill" scale="h2">• Basic information about active network interfaces on your system is gathered through the </rich_text>
      <rich_text indent="1" justification="fill" scale="h2" weight="heavy">ifconfig</rich_text>
      <rich_text indent="1" justification="fill" scale="h2"> utility:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1" scale="h2">• </rich_text>
      <rich_text scale="h2">To bring a new network connection up and add static addres you can do</rich_text>
      <rich_text>:
</rich_text>
      <rich_text indent="2">• </rich_text>
      <rich_text justification="left"></rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1" scale="h2">• </rich_text>
      <rich_text scale="h2">To bring it up and get it an assigned address from a DHCP server, you can do:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">• </rich_text>
      <rich_text justification="left"></rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1" scale="h2">• While </rich_text>
      <rich_text indent="1" scale="h2" weight="heavy">ifconfig</rich_text>
      <rich_text indent="1" scale="h2"> has been used reliably for many years, the </rich_text>
      <rich_text indent="1" scale="h2" weight="heavy">ip</rich_text>
      <rich_text indent="1" scale="h2"> utility is newer (and far more versatile). On a technical level, it is more efficient because it uses </rich_text>
      <rich_text indent="1" scale="h2" weight="heavy">netlink</rich_text>
      <rich_text indent="1" scale="h2"> sockets, rather than </rich_text>
      <rich_text indent="1" scale="h2" weight="heavy">ioctl</rich_text>
      <rich_text indent="1" scale="h2"> system calls.</rich_text>
      <rich_text scale="h2"> </rich_text>
      <rich_text scale="h2" weight="heavy">ip</rich_text>
      <rich_text scale="h2">  can be used for a wide variety of tasks. It can be used to display and  control devices, routing, policy-based routing, and tunneling. The basic  syntax is:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2">• </rich_text>
      <rich_text justification="left"></rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="1">• </rich_text>
      <rich_text indent="1" scale="h2">Some examples:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="2" scale="h3">• Show information for all network interfaces:</rich_text>
      <rich_text>
</rich_text>
      <rich_text indent="3">• </rich_text>
      <rich_text justification="left"></rich_text>
      <rich_text>





</rich_text>
      <codebox char_offset="369" justification="center" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="1">$ /sbin/ifconfig
eth0      Link encap:Ethernet  HWaddr 00:22:15:2B:64:A6
          inet addr:192.168.1.100  Bcast:192.168.1.255  Mask:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:163529 errors:0 dropped:0 overruns:0 frame:0
          TX packets:112693 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:183642176 (175.1 MiB)  TX bytes:12101864 (11.5 MiB)
          Interrupt:18
eth1      Link encap:Ethernet  HWaddr 00:22:15:2B:63:BE
          inet addr:192.168.0.101  Bcast:192.168.0.255  Mask:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:162597 errors:0 dropped:0 overruns:0 frame:0
          TX packets:56710 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:206698846 (197.1 MiB)  TX bytes:75532637 (72.0 MiB)
          Interrupt:17
          
lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          UP LOOPBACK RUNNING  MTU:16436  Metric:1
          RX packets:15115 errors:0 dropped:0 overruns:0 frame:0
          TX packets:15115 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:126793920 (120.9 MiB)  TX bytes:126793920 (120.9 MiB)</codebox>
      <codebox char_offset="555" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="1">$ sudo /sbin/ifconfig eth0 up 192.168.1.100</codebox>
      <codebox char_offset="639" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="1">$ sudo /sbin/ifconfig eth0 up
$ sudo /sbin/dhclient eth0</codebox>
      <codebox char_offset="1018" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="1">ip [ OPTIONS ] OBJECT { COMMAND | help }</codebox>
      <codebox char_offset="1086" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="1">ip link</codebox>
    </node>
  </node>
</cherrytree>
